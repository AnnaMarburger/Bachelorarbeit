/* tslint:disable */
/* eslint-disable */
/**
 * HSP Backend Gateway API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedListOfTenantDto,
  PaginatedListOfTenantQuestionnaireDto,
  PaginatedListOfTenantStudyDto,
  ProblemDetails,
  SortingParameter,
  UpdateCurrentUserCommand,
  UpdateCurrentUserPasswordCommand,
  UserDetailsDto,
} from '../models/index';
import {
    PaginatedListOfTenantDtoFromJSON,
    PaginatedListOfTenantDtoToJSON,
    PaginatedListOfTenantQuestionnaireDtoFromJSON,
    PaginatedListOfTenantQuestionnaireDtoToJSON,
    PaginatedListOfTenantStudyDtoFromJSON,
    PaginatedListOfTenantStudyDtoToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    SortingParameterFromJSON,
    SortingParameterToJSON,
    UpdateCurrentUserCommandFromJSON,
    UpdateCurrentUserCommandToJSON,
    UpdateCurrentUserPasswordCommandFromJSON,
    UpdateCurrentUserPasswordCommandToJSON,
    UserDetailsDtoFromJSON,
    UserDetailsDtoToJSON,
} from '../models/index';

export interface CurrentUserGetCurrentUserQuestionnairesRequest {
    pageNumber?: number;
    pageSize?: number;
    sorting?: Array<SortingParameter>;
    search?: string;
}

export interface CurrentUserGetCurrentUserStudiesRequest {
    pageNumber?: number;
    pageSize?: number;
    sorting?: Array<SortingParameter>;
    search?: string;
}

export interface CurrentUserGetCurrentUserTenantsRequest {
    pageNumber?: number;
    pageSize?: number;
    sorting?: Array<SortingParameter>;
    search?: string;
}

export interface CurrentUserUpdateCurrentUserRequest {
    updateCurrentUserCommand: UpdateCurrentUserCommand;
}

export interface CurrentUserUpdateCurrentUserPasswordRequest {
    updateCurrentUserPasswordCommand: UpdateCurrentUserPasswordCommand;
}

/**
 * 
 */
export class CurrentUserApi extends runtime.BaseAPI {

    /**
     */
    async currentUserGetCurrentUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDetailsDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/current-user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async currentUserGetCurrentUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDetailsDto> {
        const response = await this.currentUserGetCurrentUserRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async currentUserGetCurrentUserQuestionnairesRaw(requestParameters: CurrentUserGetCurrentUserQuestionnairesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfTenantQuestionnaireDto>> {
        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sorting'] != null) {
            queryParameters['sorting'] = requestParameters['sorting'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/current-user/questionnaires`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfTenantQuestionnaireDtoFromJSON(jsonValue));
    }

    /**
     */
    async currentUserGetCurrentUserQuestionnaires(requestParameters: CurrentUserGetCurrentUserQuestionnairesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfTenantQuestionnaireDto> {
        const response = await this.currentUserGetCurrentUserQuestionnairesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async currentUserGetCurrentUserStudiesRaw(requestParameters: CurrentUserGetCurrentUserStudiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfTenantStudyDto>> {
        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sorting'] != null) {
            queryParameters['sorting'] = requestParameters['sorting'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/current-user/studies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfTenantStudyDtoFromJSON(jsonValue));
    }

    /**
     */
    async currentUserGetCurrentUserStudies(requestParameters: CurrentUserGetCurrentUserStudiesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfTenantStudyDto> {
        const response = await this.currentUserGetCurrentUserStudiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async currentUserGetCurrentUserTenantsRaw(requestParameters: CurrentUserGetCurrentUserTenantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfTenantDto>> {
        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sorting'] != null) {
            queryParameters['sorting'] = requestParameters['sorting'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/current-user/tenants`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfTenantDtoFromJSON(jsonValue));
    }

    /**
     */
    async currentUserGetCurrentUserTenants(requestParameters: CurrentUserGetCurrentUserTenantsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfTenantDto> {
        const response = await this.currentUserGetCurrentUserTenantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async currentUserUpdateCurrentUserRaw(requestParameters: CurrentUserUpdateCurrentUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDetailsDto>> {
        if (requestParameters['updateCurrentUserCommand'] == null) {
            throw new runtime.RequiredError(
                'updateCurrentUserCommand',
                'Required parameter "updateCurrentUserCommand" was null or undefined when calling currentUserUpdateCurrentUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/current-user`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCurrentUserCommandToJSON(requestParameters['updateCurrentUserCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async currentUserUpdateCurrentUser(requestParameters: CurrentUserUpdateCurrentUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDetailsDto | null | undefined > {
        const response = await this.currentUserUpdateCurrentUserRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     */
    async currentUserUpdateCurrentUserPasswordRaw(requestParameters: CurrentUserUpdateCurrentUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['updateCurrentUserPasswordCommand'] == null) {
            throw new runtime.RequiredError(
                'updateCurrentUserPasswordCommand',
                'Required parameter "updateCurrentUserPasswordCommand" was null or undefined when calling currentUserUpdateCurrentUserPassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/current-user/password`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCurrentUserPasswordCommandToJSON(requestParameters['updateCurrentUserPasswordCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async currentUserUpdateCurrentUserPassword(requestParameters: CurrentUserUpdateCurrentUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.currentUserUpdateCurrentUserPasswordRaw(requestParameters, initOverrides);
    }

}
