/* tslint:disable */
/* eslint-disable */
/**
 * HSP Backend Gateway API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProblemDetails,
  UpdateTenantVersionsCommand,
} from '../models/index';
import {
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    UpdateTenantVersionsCommandFromJSON,
    UpdateTenantVersionsCommandToJSON,
} from '../models/index';

export interface ManagementGetTenantVersionsRequest {
    tenantIds?: Array<string>;
}

export interface ManagementUpdateBackendVersionRequest {
    body: object;
}

export interface ManagementUpdateGatewayVersionRequest {
    body: object;
}

export interface ManagementUpdateTenantVersionsRequest {
    updateTenantVersionsCommand: UpdateTenantVersionsCommand;
}

/**
 * 
 */
export class ManagementApi extends runtime.BaseAPI {

    /**
     */
    async managementGetBackendVersionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Date>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/management/backend/version`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<Date>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async managementGetBackendVersion(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Date> {
        const response = await this.managementGetBackendVersionRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async managementGetGatewayVersionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Date>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/management/gateway/version`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<Date>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async managementGetGatewayVersion(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Date> {
        const response = await this.managementGetGatewayVersionRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async managementGetTenantVersionsRaw(requestParameters: ManagementGetTenantVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: Date; }>> {
        const queryParameters: any = {};

        if (requestParameters['tenantIds'] != null) {
            queryParameters['tenantIds'] = requestParameters['tenantIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/management/tenants/versions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async managementGetTenantVersions(requestParameters: ManagementGetTenantVersionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: Date; }> {
        const response = await this.managementGetTenantVersionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async managementUpdateBackendVersionRaw(requestParameters: ManagementUpdateBackendVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling managementUpdateBackendVersion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/management/backend/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async managementUpdateBackendVersion(requestParameters: ManagementUpdateBackendVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.managementUpdateBackendVersionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async managementUpdateGatewayVersionRaw(requestParameters: ManagementUpdateGatewayVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling managementUpdateGatewayVersion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/management/gateway/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async managementUpdateGatewayVersion(requestParameters: ManagementUpdateGatewayVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.managementUpdateGatewayVersionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async managementUpdateTenantVersionsRaw(requestParameters: ManagementUpdateTenantVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['updateTenantVersionsCommand'] == null) {
            throw new runtime.RequiredError(
                'updateTenantVersionsCommand',
                'Required parameter "updateTenantVersionsCommand" was null or undefined when calling managementUpdateTenantVersions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/management/tenants/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTenantVersionsCommandToJSON(requestParameters['updateTenantVersionsCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async managementUpdateTenantVersions(requestParameters: ManagementUpdateTenantVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.managementUpdateTenantVersionsRaw(requestParameters, initOverrides);
    }

}
