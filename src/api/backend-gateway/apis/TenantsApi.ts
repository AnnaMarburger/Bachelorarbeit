/* tslint:disable */
/* eslint-disable */
/**
 * HSP Backend Gateway API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTenantCommand,
  PaginatedListOfTenantDto,
  ProblemDetails,
  SortingParameter,
  TenantDetailsDto,
  TenantDto,
  UpdateTenantCommand,
} from '../models/index';
import {
    CreateTenantCommandFromJSON,
    CreateTenantCommandToJSON,
    PaginatedListOfTenantDtoFromJSON,
    PaginatedListOfTenantDtoToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    SortingParameterFromJSON,
    SortingParameterToJSON,
    TenantDetailsDtoFromJSON,
    TenantDetailsDtoToJSON,
    TenantDtoFromJSON,
    TenantDtoToJSON,
    UpdateTenantCommandFromJSON,
    UpdateTenantCommandToJSON,
} from '../models/index';

export interface TenantsCreateTenantRequest {
    createTenantCommand: CreateTenantCommand;
}

export interface TenantsDeleteTenantRequest {
    tenantId: string;
}

export interface TenantsGetTenantRequest {
    tenantId: string;
}

export interface TenantsGetTenantsRequest {
    pageNumber?: number;
    pageSize?: number;
    sorting?: Array<SortingParameter>;
    search?: string;
}

export interface TenantsUpdateTenantRequest {
    tenantId: string;
    updateTenantCommand: UpdateTenantCommand;
}

/**
 * 
 */
export class TenantsApi extends runtime.BaseAPI {

    /**
     */
    async tenantsCreateTenantRaw(requestParameters: TenantsCreateTenantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantDto>> {
        if (requestParameters['createTenantCommand'] == null) {
            throw new runtime.RequiredError(
                'createTenantCommand',
                'Required parameter "createTenantCommand" was null or undefined when calling tenantsCreateTenant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/tenants`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTenantCommandToJSON(requestParameters['createTenantCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantDtoFromJSON(jsonValue));
    }

    /**
     */
    async tenantsCreateTenant(requestParameters: TenantsCreateTenantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantDto> {
        const response = await this.tenantsCreateTenantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tenantsDeleteTenantRaw(requestParameters: TenantsDeleteTenantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling tenantsDeleteTenant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/tenants/{tenantId}`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tenantsDeleteTenant(requestParameters: TenantsDeleteTenantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tenantsDeleteTenantRaw(requestParameters, initOverrides);
    }

    /**
     */
    async tenantsGetTenantRaw(requestParameters: TenantsGetTenantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantDetailsDto>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling tenantsGetTenant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/tenants/{tenantId}`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async tenantsGetTenant(requestParameters: TenantsGetTenantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantDetailsDto> {
        const response = await this.tenantsGetTenantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tenantsGetTenantsRaw(requestParameters: TenantsGetTenantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfTenantDto>> {
        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sorting'] != null) {
            queryParameters['sorting'] = requestParameters['sorting'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/tenants`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfTenantDtoFromJSON(jsonValue));
    }

    /**
     */
    async tenantsGetTenants(requestParameters: TenantsGetTenantsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfTenantDto> {
        const response = await this.tenantsGetTenantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tenantsUpdateTenantRaw(requestParameters: TenantsUpdateTenantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantDto>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling tenantsUpdateTenant().'
            );
        }

        if (requestParameters['updateTenantCommand'] == null) {
            throw new runtime.RequiredError(
                'updateTenantCommand',
                'Required parameter "updateTenantCommand" was null or undefined when calling tenantsUpdateTenant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/tenants/{tenantId}`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTenantCommandToJSON(requestParameters['updateTenantCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantDtoFromJSON(jsonValue));
    }

    /**
     */
    async tenantsUpdateTenant(requestParameters: TenantsUpdateTenantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantDto> {
        const response = await this.tenantsUpdateTenantRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
