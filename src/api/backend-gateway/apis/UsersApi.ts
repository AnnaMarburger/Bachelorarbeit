/* tslint:disable */
/* eslint-disable */
/**
 * HSP Backend Gateway API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateUserCommand,
  PaginatedListOfUserDto,
  ProblemDetails,
  SortingParameter,
  UpdateUserCommand,
  UpdateUserPasswordCommand,
  UserDetailsDto,
  UserDto,
} from '../models/index';
import {
    CreateUserCommandFromJSON,
    CreateUserCommandToJSON,
    PaginatedListOfUserDtoFromJSON,
    PaginatedListOfUserDtoToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    SortingParameterFromJSON,
    SortingParameterToJSON,
    UpdateUserCommandFromJSON,
    UpdateUserCommandToJSON,
    UpdateUserPasswordCommandFromJSON,
    UpdateUserPasswordCommandToJSON,
    UserDetailsDtoFromJSON,
    UserDetailsDtoToJSON,
    UserDtoFromJSON,
    UserDtoToJSON,
} from '../models/index';

export interface UsersCreateUserRequest {
    createUserCommand: CreateUserCommand;
}

export interface UsersDeleteUserRequest {
    userId: string;
}

export interface UsersEnrichUserRequest {
    userId: string;
}

export interface UsersEnrichUsersRequest {
    requestBody: Array<string>;
}

export interface UsersGetUserRequest {
    userId: string;
}

export interface UsersGetUsersRequest {
    pageNumber?: number;
    pageSize?: number;
    sorting?: Array<SortingParameter>;
    search?: string;
}

export interface UsersSendRegistrationMailRequest {
    userId: string;
}

export interface UsersUpdateUserRequest {
    userId: string;
    updateUserCommand: UpdateUserCommand;
}

export interface UsersUpdateUserPasswordRequest {
    userId: string;
    updateUserPasswordCommand: UpdateUserPasswordCommand;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     */
    async usersCreateUserRaw(requestParameters: UsersCreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDto>> {
        if (requestParameters['createUserCommand'] == null) {
            throw new runtime.RequiredError(
                'createUserCommand',
                'Required parameter "createUserCommand" was null or undefined when calling usersCreateUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserCommandToJSON(requestParameters['createUserCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDtoFromJSON(jsonValue));
    }

    /**
     */
    async usersCreateUser(requestParameters: UsersCreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDto> {
        const response = await this.usersCreateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersDeleteUserRaw(requestParameters: UsersDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling usersDeleteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersDeleteUser(requestParameters: UsersDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersDeleteUserRaw(requestParameters, initOverrides);
    }

    /**
     */
    async usersEnrichUserRaw(requestParameters: UsersEnrichUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDetailsDto>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling usersEnrichUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}/enrich`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async usersEnrichUser(requestParameters: UsersEnrichUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDetailsDto> {
        const response = await this.usersEnrichUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersEnrichUsersRaw(requestParameters: UsersEnrichUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserDto>>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling usersEnrichUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/enrich`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserDtoFromJSON));
    }

    /**
     */
    async usersEnrichUsers(requestParameters: UsersEnrichUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserDto>> {
        const response = await this.usersEnrichUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersGetUserRaw(requestParameters: UsersGetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDetailsDto>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling usersGetUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async usersGetUser(requestParameters: UsersGetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDetailsDto> {
        const response = await this.usersGetUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersGetUsersRaw(requestParameters: UsersGetUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfUserDto>> {
        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sorting'] != null) {
            queryParameters['sorting'] = requestParameters['sorting'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfUserDtoFromJSON(jsonValue));
    }

    /**
     */
    async usersGetUsers(requestParameters: UsersGetUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfUserDto> {
        const response = await this.usersGetUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersSendRegistrationMailRaw(requestParameters: UsersSendRegistrationMailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling usersSendRegistrationMail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}/registrationmail`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersSendRegistrationMail(requestParameters: UsersSendRegistrationMailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersSendRegistrationMailRaw(requestParameters, initOverrides);
    }

    /**
     */
    async usersUpdateUserRaw(requestParameters: UsersUpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDetailsDto>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling usersUpdateUser().'
            );
        }

        if (requestParameters['updateUserCommand'] == null) {
            throw new runtime.RequiredError(
                'updateUserCommand',
                'Required parameter "updateUserCommand" was null or undefined when calling usersUpdateUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserCommandToJSON(requestParameters['updateUserCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async usersUpdateUser(requestParameters: UsersUpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDetailsDto> {
        const response = await this.usersUpdateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersUpdateUserPasswordRaw(requestParameters: UsersUpdateUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling usersUpdateUserPassword().'
            );
        }

        if (requestParameters['updateUserPasswordCommand'] == null) {
            throw new runtime.RequiredError(
                'updateUserPasswordCommand',
                'Required parameter "updateUserPasswordCommand" was null or undefined when calling usersUpdateUserPassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{userId}/password`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserPasswordCommandToJSON(requestParameters['updateUserPasswordCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersUpdateUserPassword(requestParameters: UsersUpdateUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersUpdateUserPasswordRaw(requestParameters, initOverrides);
    }

}
