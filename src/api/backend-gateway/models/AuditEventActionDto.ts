/* tslint:disable */
/* eslint-disable */
/**
 * HSP Backend Gateway API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AuditEventActionDto
 */
export interface AuditEventActionDto {
    /**
     * 
     * @type {string}
     * @memberof AuditEventActionDto
     */
    traceId: string;
    /**
     * 
     * @type {string}
     * @memberof AuditEventActionDto
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditEventActionDto
     */
    ipAddress: string;
    /**
     * 
     * @type {string}
     * @memberof AuditEventActionDto
     */
    actionName: string;
    /**
     * 
     * @type {string}
     * @memberof AuditEventActionDto
     */
    httpMethod: string;
    /**
     * 
     * @type {string}
     * @memberof AuditEventActionDto
     */
    requestUrl: string;
    /**
     * 
     * @type {string}
     * @memberof AuditEventActionDto
     */
    controllerName: string;
    /**
     * 
     * @type {string}
     * @memberof AuditEventActionDto
     */
    responseStatus: string;
    /**
     * 
     * @type {any}
     * @memberof AuditEventActionDto
     */
    actionParameters?: any;
    /**
     * 
     * @type {number}
     * @memberof AuditEventActionDto
     */
    responseStatusCode?: number;
    /**
     * 
     * @type {any}
     * @memberof AuditEventActionDto
     */
    formVariables?: any;
    /**
     * 
     * @type {string}
     * @memberof AuditEventActionDto
     */
    exception?: string;
}

/**
 * Check if a given object implements the AuditEventActionDto interface.
 */
export function instanceOfAuditEventActionDto(value: object): value is AuditEventActionDto {
    if (!('traceId' in value) || value['traceId'] === undefined) return false;
    if (!('ipAddress' in value) || value['ipAddress'] === undefined) return false;
    if (!('actionName' in value) || value['actionName'] === undefined) return false;
    if (!('httpMethod' in value) || value['httpMethod'] === undefined) return false;
    if (!('requestUrl' in value) || value['requestUrl'] === undefined) return false;
    if (!('controllerName' in value) || value['controllerName'] === undefined) return false;
    if (!('responseStatus' in value) || value['responseStatus'] === undefined) return false;
    return true;
}

export function AuditEventActionDtoFromJSON(json: any): AuditEventActionDto {
    return AuditEventActionDtoFromJSONTyped(json, false);
}

export function AuditEventActionDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuditEventActionDto {
    if (json == null) {
        return json;
    }
    return {
        
        'traceId': json['traceId'],
        'userName': json['userName'] == null ? undefined : json['userName'],
        'ipAddress': json['ipAddress'],
        'actionName': json['actionName'],
        'httpMethod': json['httpMethod'],
        'requestUrl': json['requestUrl'],
        'controllerName': json['controllerName'],
        'responseStatus': json['responseStatus'],
        'actionParameters': json['actionParameters'] == null ? undefined : json['actionParameters'],
        'responseStatusCode': json['responseStatusCode'] == null ? undefined : json['responseStatusCode'],
        'formVariables': json['formVariables'] == null ? undefined : json['formVariables'],
        'exception': json['exception'] == null ? undefined : json['exception'],
    };
}

export function AuditEventActionDtoToJSON(value?: AuditEventActionDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'traceId': value['traceId'],
        'userName': value['userName'],
        'ipAddress': value['ipAddress'],
        'actionName': value['actionName'],
        'httpMethod': value['httpMethod'],
        'requestUrl': value['requestUrl'],
        'controllerName': value['controllerName'],
        'responseStatus': value['responseStatus'],
        'actionParameters': value['actionParameters'],
        'responseStatusCode': value['responseStatusCode'],
        'formVariables': value['formVariables'],
        'exception': value['exception'],
    };
}

