/* tslint:disable */
/* eslint-disable */
/**
 * HSP Backend Gateway API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AuditEventActionDto } from './AuditEventActionDto';
import {
    AuditEventActionDtoFromJSON,
    AuditEventActionDtoFromJSONTyped,
    AuditEventActionDtoToJSON,
} from './AuditEventActionDto';
import type { AuditEventEnvironmentDto } from './AuditEventEnvironmentDto';
import {
    AuditEventEnvironmentDtoFromJSON,
    AuditEventEnvironmentDtoFromJSONTyped,
    AuditEventEnvironmentDtoToJSON,
} from './AuditEventEnvironmentDto';

/**
 * 
 * @export
 * @interface AuditEventDataDto
 */
export interface AuditEventDataDto {
    /**
     * 
     * @type {AuditEventActionDto}
     * @memberof AuditEventDataDto
     */
    action: AuditEventActionDto;
    /**
     * 
     * @type {string}
     * @memberof AuditEventDataDto
     */
    userId?: string;
    /**
     * 
     * @type {Date}
     * @memberof AuditEventDataDto
     */
    endDate: Date;
    /**
     * 
     * @type {number}
     * @memberof AuditEventDataDto
     */
    duration: number;
    /**
     * 
     * @type {string}
     * @memberof AuditEventDataDto
     */
    eventType: string;
    /**
     * 
     * @type {Date}
     * @memberof AuditEventDataDto
     */
    startDate: Date;
    /**
     * 
     * @type {AuditEventEnvironmentDto}
     * @memberof AuditEventDataDto
     */
    environment: AuditEventEnvironmentDto;
}

/**
 * Check if a given object implements the AuditEventDataDto interface.
 */
export function instanceOfAuditEventDataDto(value: object): value is AuditEventDataDto {
    if (!('action' in value) || value['action'] === undefined) return false;
    if (!('endDate' in value) || value['endDate'] === undefined) return false;
    if (!('duration' in value) || value['duration'] === undefined) return false;
    if (!('eventType' in value) || value['eventType'] === undefined) return false;
    if (!('startDate' in value) || value['startDate'] === undefined) return false;
    if (!('environment' in value) || value['environment'] === undefined) return false;
    return true;
}

export function AuditEventDataDtoFromJSON(json: any): AuditEventDataDto {
    return AuditEventDataDtoFromJSONTyped(json, false);
}

export function AuditEventDataDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuditEventDataDto {
    if (json == null) {
        return json;
    }
    return {
        
        'action': AuditEventActionDtoFromJSON(json['action']),
        'userId': json['userId'] == null ? undefined : json['userId'],
        'endDate': (new Date(json['endDate'])),
        'duration': json['duration'],
        'eventType': json['eventType'],
        'startDate': (new Date(json['startDate'])),
        'environment': AuditEventEnvironmentDtoFromJSON(json['environment']),
    };
}

export function AuditEventDataDtoToJSON(value?: AuditEventDataDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'action': AuditEventActionDtoToJSON(value['action']),
        'userId': value['userId'],
        'endDate': ((value['endDate']).toISOString()),
        'duration': value['duration'],
        'eventType': value['eventType'],
        'startDate': ((value['startDate']).toISOString()),
        'environment': AuditEventEnvironmentDtoToJSON(value['environment']),
    };
}

