/* tslint:disable */
/* eslint-disable */
/**
 * HSP Backend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateLanguageCommand,
  LanguageDto,
  PaginatedListOfLanguageDto,
  ProblemDetails,
  SetDefaultLanguageCommand,
  SortingParameter,
  TranslateCommand,
  UpdateLanguageCommand,
} from '../models/index';
import {
    CreateLanguageCommandFromJSON,
    CreateLanguageCommandToJSON,
    LanguageDtoFromJSON,
    LanguageDtoToJSON,
    PaginatedListOfLanguageDtoFromJSON,
    PaginatedListOfLanguageDtoToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    SetDefaultLanguageCommandFromJSON,
    SetDefaultLanguageCommandToJSON,
    SortingParameterFromJSON,
    SortingParameterToJSON,
    TranslateCommandFromJSON,
    TranslateCommandToJSON,
    UpdateLanguageCommandFromJSON,
    UpdateLanguageCommandToJSON,
} from '../models/index';

export interface LanguagesCreateLanguageRequest {
    createLanguageCommand: CreateLanguageCommand;
}

export interface LanguagesDeleteLanguageRequest {
    languageId: string;
}

export interface LanguagesGetLanguageRequest {
    languageId: string;
}

export interface LanguagesGetLanguagesRequest {
    pageNumber?: number;
    pageSize?: number;
    sorting?: Array<SortingParameter>;
    search?: string;
}

export interface LanguagesSetDefaultLanguageRequest {
    setDefaultLanguageCommand: SetDefaultLanguageCommand;
}

export interface LanguagesTranslateRequest {
    translateCommand: TranslateCommand;
}

export interface LanguagesUpdateLanguageRequest {
    languageId: string;
    updateLanguageCommand: UpdateLanguageCommand;
}

/**
 * 
 */
export class LanguagesApi extends runtime.BaseAPI {

    /**
     */
    async languagesCreateLanguageRaw(requestParameters: LanguagesCreateLanguageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LanguageDto>> {
        if (requestParameters['createLanguageCommand'] == null) {
            throw new runtime.RequiredError(
                'createLanguageCommand',
                'Required parameter "createLanguageCommand" was null or undefined when calling languagesCreateLanguage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/languages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLanguageCommandToJSON(requestParameters['createLanguageCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LanguageDtoFromJSON(jsonValue));
    }

    /**
     */
    async languagesCreateLanguage(requestParameters: LanguagesCreateLanguageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LanguageDto> {
        const response = await this.languagesCreateLanguageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async languagesDeleteLanguageRaw(requestParameters: LanguagesDeleteLanguageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['languageId'] == null) {
            throw new runtime.RequiredError(
                'languageId',
                'Required parameter "languageId" was null or undefined when calling languagesDeleteLanguage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/languages/{languageId}`.replace(`{${"languageId"}}`, encodeURIComponent(String(requestParameters['languageId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async languagesDeleteLanguage(requestParameters: LanguagesDeleteLanguageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.languagesDeleteLanguageRaw(requestParameters, initOverrides);
    }

    /**
     */
    async languagesGetDefaultLanguageRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LanguageDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/languages/default`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LanguageDtoFromJSON(jsonValue));
    }

    /**
     */
    async languagesGetDefaultLanguage(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LanguageDto> {
        const response = await this.languagesGetDefaultLanguageRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async languagesGetLanguageRaw(requestParameters: LanguagesGetLanguageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LanguageDto>> {
        if (requestParameters['languageId'] == null) {
            throw new runtime.RequiredError(
                'languageId',
                'Required parameter "languageId" was null or undefined when calling languagesGetLanguage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/languages/{languageId}`.replace(`{${"languageId"}}`, encodeURIComponent(String(requestParameters['languageId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LanguageDtoFromJSON(jsonValue));
    }

    /**
     */
    async languagesGetLanguage(requestParameters: LanguagesGetLanguageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LanguageDto> {
        const response = await this.languagesGetLanguageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async languagesGetLanguagesRaw(requestParameters: LanguagesGetLanguagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfLanguageDto>> {
        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sorting'] != null) {
            queryParameters['sorting'] = requestParameters['sorting'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/languages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfLanguageDtoFromJSON(jsonValue));
    }

    /**
     */
    async languagesGetLanguages(requestParameters: LanguagesGetLanguagesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfLanguageDto> {
        const response = await this.languagesGetLanguagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async languagesSetDefaultLanguageRaw(requestParameters: LanguagesSetDefaultLanguageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['setDefaultLanguageCommand'] == null) {
            throw new runtime.RequiredError(
                'setDefaultLanguageCommand',
                'Required parameter "setDefaultLanguageCommand" was null or undefined when calling languagesSetDefaultLanguage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/languages/default`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetDefaultLanguageCommandToJSON(requestParameters['setDefaultLanguageCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async languagesSetDefaultLanguage(requestParameters: LanguagesSetDefaultLanguageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.languagesSetDefaultLanguageRaw(requestParameters, initOverrides);
    }

    /**
     */
    async languagesTranslateRaw(requestParameters: LanguagesTranslateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['translateCommand'] == null) {
            throw new runtime.RequiredError(
                'translateCommand',
                'Required parameter "translateCommand" was null or undefined when calling languagesTranslate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/languages/translate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TranslateCommandToJSON(requestParameters['translateCommand']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async languagesTranslate(requestParameters: LanguagesTranslateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.languagesTranslateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async languagesUpdateLanguageRaw(requestParameters: LanguagesUpdateLanguageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LanguageDto>> {
        if (requestParameters['languageId'] == null) {
            throw new runtime.RequiredError(
                'languageId',
                'Required parameter "languageId" was null or undefined when calling languagesUpdateLanguage().'
            );
        }

        if (requestParameters['updateLanguageCommand'] == null) {
            throw new runtime.RequiredError(
                'updateLanguageCommand',
                'Required parameter "updateLanguageCommand" was null or undefined when calling languagesUpdateLanguage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/languages/{languageId}`.replace(`{${"languageId"}}`, encodeURIComponent(String(requestParameters['languageId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateLanguageCommandToJSON(requestParameters['updateLanguageCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LanguageDtoFromJSON(jsonValue));
    }

    /**
     */
    async languagesUpdateLanguage(requestParameters: LanguagesUpdateLanguageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LanguageDto> {
        const response = await this.languagesUpdateLanguageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
