/* tslint:disable */
/* eslint-disable */
/**
 * HSP Backend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ContentDto,
  CreateQuestionnaireCommand,
  ElementType,
  PaginatedListOfQuestionnaireDto,
  PaginatedListOfQuestionnaireInstanceDto,
  ProblemDetails,
  QuestionnaireDetailsDto,
  QuestionnaireDto,
  QuestionnaireInstanceDetailsDto,
  QuestionnaireInstanceState,
  SortingParameter,
  TranslateQuestionnaireCommand,
  UpdateQuestionnaireCommand,
} from '../models/index';
import {
    ContentDtoFromJSON,
    ContentDtoToJSON,
    CreateQuestionnaireCommandFromJSON,
    CreateQuestionnaireCommandToJSON,
    ElementTypeFromJSON,
    ElementTypeToJSON,
    PaginatedListOfQuestionnaireDtoFromJSON,
    PaginatedListOfQuestionnaireDtoToJSON,
    PaginatedListOfQuestionnaireInstanceDtoFromJSON,
    PaginatedListOfQuestionnaireInstanceDtoToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    QuestionnaireDetailsDtoFromJSON,
    QuestionnaireDetailsDtoToJSON,
    QuestionnaireDtoFromJSON,
    QuestionnaireDtoToJSON,
    QuestionnaireInstanceDetailsDtoFromJSON,
    QuestionnaireInstanceDetailsDtoToJSON,
    QuestionnaireInstanceStateFromJSON,
    QuestionnaireInstanceStateToJSON,
    SortingParameterFromJSON,
    SortingParameterToJSON,
    TranslateQuestionnaireCommandFromJSON,
    TranslateQuestionnaireCommandToJSON,
    UpdateQuestionnaireCommandFromJSON,
    UpdateQuestionnaireCommandToJSON,
} from '../models/index';

export interface QuestionnairesCreateQuestionnaireRequest {
    createQuestionnaireCommand: CreateQuestionnaireCommand;
}

export interface QuestionnairesDeleteQuestionnaireRequest {
    questionnaireId: string;
}

export interface QuestionnairesExportQuestionnaireInstancesRequest {
    questionnaireId: string;
    questionnaireInstanceIds?: Array<string>;
}

export interface QuestionnairesGetContentsRequest {
    limit?: number;
    search?: string;
    types?: Array<ElementType>;
    excludeTypes?: Array<ElementType>;
    projectIds?: Array<string>;
    containerIds?: Array<string>;
    excludeContainerIds?: Array<string>;
    contentIds?: Array<string>;
}

export interface QuestionnairesGetQuestionnaireRequest {
    questionnaireId: string;
    questionnaireVersion?: number;
}

export interface QuestionnairesGetQuestionnaireInstanceRequest {
    questionnaireInstanceId: string;
}

export interface QuestionnairesGetQuestionnaireInstancesRequest {
    pageNumber?: number;
    pageSize?: number;
    sorting?: Array<SortingParameter>;
    search?: string;
    from?: Date;
    until?: Date;
    projectIds?: Array<string>;
    questionnaireIds?: Array<string>;
    states?: Array<QuestionnaireInstanceState>;
}

export interface QuestionnairesGetQuestionnairesRequest {
    pageNumber?: number;
    pageSize?: number;
    sorting?: Array<SortingParameter>;
    search?: string;
    projectIds?: Array<string>;
}

export interface QuestionnairesPublishQuestionnaireRequest {
    questionnaireId: string;
}

export interface QuestionnairesTranslateQuestionnaireRequest {
    questionnaireId: string;
    translateQuestionnaireCommand: TranslateQuestionnaireCommand;
}

export interface QuestionnairesUnpublishQuestionnaireRequest {
    questionnaireId: string;
}

export interface QuestionnairesUpdateQuestionnaireRequest {
    questionnaireId: string;
    updateQuestionnaireCommand: UpdateQuestionnaireCommand;
}

/**
 * 
 */
export class QuestionnairesApi extends runtime.BaseAPI {

    /**
     */
    async questionnairesCreateQuestionnaireRaw(requestParameters: QuestionnairesCreateQuestionnaireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionnaireDto>> {
        if (requestParameters['createQuestionnaireCommand'] == null) {
            throw new runtime.RequiredError(
                'createQuestionnaireCommand',
                'Required parameter "createQuestionnaireCommand" was null or undefined when calling questionnairesCreateQuestionnaire().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/questionnaires`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateQuestionnaireCommandToJSON(requestParameters['createQuestionnaireCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionnaireDtoFromJSON(jsonValue));
    }

    /**
     */
    async questionnairesCreateQuestionnaire(requestParameters: QuestionnairesCreateQuestionnaireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionnaireDto> {
        const response = await this.questionnairesCreateQuestionnaireRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async questionnairesDeleteQuestionnaireRaw(requestParameters: QuestionnairesDeleteQuestionnaireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['questionnaireId'] == null) {
            throw new runtime.RequiredError(
                'questionnaireId',
                'Required parameter "questionnaireId" was null or undefined when calling questionnairesDeleteQuestionnaire().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/questionnaires/{questionnaireId}`.replace(`{${"questionnaireId"}}`, encodeURIComponent(String(requestParameters['questionnaireId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async questionnairesDeleteQuestionnaire(requestParameters: QuestionnairesDeleteQuestionnaireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.questionnairesDeleteQuestionnaireRaw(requestParameters, initOverrides);
    }

    /**
     */
    async questionnairesExportQuestionnaireInstancesRaw(requestParameters: QuestionnairesExportQuestionnaireInstancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['questionnaireId'] == null) {
            throw new runtime.RequiredError(
                'questionnaireId',
                'Required parameter "questionnaireId" was null or undefined when calling questionnairesExportQuestionnaireInstances().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['questionnaireInstanceIds'] != null) {
            queryParameters['questionnaireInstanceIds'] = requestParameters['questionnaireInstanceIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/questionnaires/{questionnaireId}/instances/export`.replace(`{${"questionnaireId"}}`, encodeURIComponent(String(requestParameters['questionnaireId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     */
    async questionnairesExportQuestionnaireInstances(requestParameters: QuestionnairesExportQuestionnaireInstancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.questionnairesExportQuestionnaireInstancesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async questionnairesGetContentsRaw(requestParameters: QuestionnairesGetContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ContentDto>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['types'] != null) {
            queryParameters['types'] = requestParameters['types'];
        }

        if (requestParameters['excludeTypes'] != null) {
            queryParameters['excludeTypes'] = requestParameters['excludeTypes'];
        }

        if (requestParameters['projectIds'] != null) {
            queryParameters['projectIds'] = requestParameters['projectIds'];
        }

        if (requestParameters['containerIds'] != null) {
            queryParameters['containerIds'] = requestParameters['containerIds'];
        }

        if (requestParameters['excludeContainerIds'] != null) {
            queryParameters['excludeContainerIds'] = requestParameters['excludeContainerIds'];
        }

        if (requestParameters['contentIds'] != null) {
            queryParameters['contentIds'] = requestParameters['contentIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/questionnaires/contents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContentDtoFromJSON));
    }

    /**
     */
    async questionnairesGetContents(requestParameters: QuestionnairesGetContentsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ContentDto>> {
        const response = await this.questionnairesGetContentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async questionnairesGetQuestionnaireRaw(requestParameters: QuestionnairesGetQuestionnaireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionnaireDetailsDto>> {
        if (requestParameters['questionnaireId'] == null) {
            throw new runtime.RequiredError(
                'questionnaireId',
                'Required parameter "questionnaireId" was null or undefined when calling questionnairesGetQuestionnaire().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['questionnaireVersion'] != null) {
            queryParameters['questionnaireVersion'] = requestParameters['questionnaireVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/questionnaires/{questionnaireId}`.replace(`{${"questionnaireId"}}`, encodeURIComponent(String(requestParameters['questionnaireId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionnaireDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async questionnairesGetQuestionnaire(requestParameters: QuestionnairesGetQuestionnaireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionnaireDetailsDto> {
        const response = await this.questionnairesGetQuestionnaireRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async questionnairesGetQuestionnaireInstanceRaw(requestParameters: QuestionnairesGetQuestionnaireInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionnaireInstanceDetailsDto>> {
        if (requestParameters['questionnaireInstanceId'] == null) {
            throw new runtime.RequiredError(
                'questionnaireInstanceId',
                'Required parameter "questionnaireInstanceId" was null or undefined when calling questionnairesGetQuestionnaireInstance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/questionnaires/instances/{questionnaireInstanceId}`.replace(`{${"questionnaireInstanceId"}}`, encodeURIComponent(String(requestParameters['questionnaireInstanceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionnaireInstanceDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async questionnairesGetQuestionnaireInstance(requestParameters: QuestionnairesGetQuestionnaireInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionnaireInstanceDetailsDto> {
        const response = await this.questionnairesGetQuestionnaireInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async questionnairesGetQuestionnaireInstancesRaw(requestParameters: QuestionnairesGetQuestionnaireInstancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfQuestionnaireInstanceDto>> {
        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sorting'] != null) {
            queryParameters['sorting'] = requestParameters['sorting'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['from'] != null) {
            queryParameters['from'] = (requestParameters['from'] as any).toISOString();
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = (requestParameters['until'] as any).toISOString();
        }

        if (requestParameters['projectIds'] != null) {
            queryParameters['projectIds'] = requestParameters['projectIds'];
        }

        if (requestParameters['questionnaireIds'] != null) {
            queryParameters['questionnaireIds'] = requestParameters['questionnaireIds'];
        }

        if (requestParameters['states'] != null) {
            queryParameters['states'] = requestParameters['states'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/questionnaires/instances`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfQuestionnaireInstanceDtoFromJSON(jsonValue));
    }

    /**
     */
    async questionnairesGetQuestionnaireInstances(requestParameters: QuestionnairesGetQuestionnaireInstancesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfQuestionnaireInstanceDto> {
        const response = await this.questionnairesGetQuestionnaireInstancesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async questionnairesGetQuestionnairesRaw(requestParameters: QuestionnairesGetQuestionnairesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfQuestionnaireDto>> {
        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sorting'] != null) {
            queryParameters['sorting'] = requestParameters['sorting'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['projectIds'] != null) {
            queryParameters['projectIds'] = requestParameters['projectIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/questionnaires`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfQuestionnaireDtoFromJSON(jsonValue));
    }

    /**
     */
    async questionnairesGetQuestionnaires(requestParameters: QuestionnairesGetQuestionnairesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfQuestionnaireDto> {
        const response = await this.questionnairesGetQuestionnairesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async questionnairesPublishQuestionnaireRaw(requestParameters: QuestionnairesPublishQuestionnaireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['questionnaireId'] == null) {
            throw new runtime.RequiredError(
                'questionnaireId',
                'Required parameter "questionnaireId" was null or undefined when calling questionnairesPublishQuestionnaire().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/questionnaires/{questionnaireId}/publish`.replace(`{${"questionnaireId"}}`, encodeURIComponent(String(requestParameters['questionnaireId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async questionnairesPublishQuestionnaire(requestParameters: QuestionnairesPublishQuestionnaireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.questionnairesPublishQuestionnaireRaw(requestParameters, initOverrides);
    }

    /**
     */
    async questionnairesTranslateQuestionnaireRaw(requestParameters: QuestionnairesTranslateQuestionnaireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionnaireDetailsDto>> {
        if (requestParameters['questionnaireId'] == null) {
            throw new runtime.RequiredError(
                'questionnaireId',
                'Required parameter "questionnaireId" was null or undefined when calling questionnairesTranslateQuestionnaire().'
            );
        }

        if (requestParameters['translateQuestionnaireCommand'] == null) {
            throw new runtime.RequiredError(
                'translateQuestionnaireCommand',
                'Required parameter "translateQuestionnaireCommand" was null or undefined when calling questionnairesTranslateQuestionnaire().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/questionnaires/{questionnaireId}/translate`.replace(`{${"questionnaireId"}}`, encodeURIComponent(String(requestParameters['questionnaireId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TranslateQuestionnaireCommandToJSON(requestParameters['translateQuestionnaireCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionnaireDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async questionnairesTranslateQuestionnaire(requestParameters: QuestionnairesTranslateQuestionnaireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionnaireDetailsDto> {
        const response = await this.questionnairesTranslateQuestionnaireRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async questionnairesUnpublishQuestionnaireRaw(requestParameters: QuestionnairesUnpublishQuestionnaireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['questionnaireId'] == null) {
            throw new runtime.RequiredError(
                'questionnaireId',
                'Required parameter "questionnaireId" was null or undefined when calling questionnairesUnpublishQuestionnaire().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/questionnaires/{questionnaireId}/unpublish`.replace(`{${"questionnaireId"}}`, encodeURIComponent(String(requestParameters['questionnaireId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async questionnairesUnpublishQuestionnaire(requestParameters: QuestionnairesUnpublishQuestionnaireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.questionnairesUnpublishQuestionnaireRaw(requestParameters, initOverrides);
    }

    /**
     */
    async questionnairesUpdateQuestionnaireRaw(requestParameters: QuestionnairesUpdateQuestionnaireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionnaireDetailsDto>> {
        if (requestParameters['questionnaireId'] == null) {
            throw new runtime.RequiredError(
                'questionnaireId',
                'Required parameter "questionnaireId" was null or undefined when calling questionnairesUpdateQuestionnaire().'
            );
        }

        if (requestParameters['updateQuestionnaireCommand'] == null) {
            throw new runtime.RequiredError(
                'updateQuestionnaireCommand',
                'Required parameter "updateQuestionnaireCommand" was null or undefined when calling questionnairesUpdateQuestionnaire().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/questionnaires/{questionnaireId}`.replace(`{${"questionnaireId"}}`, encodeURIComponent(String(requestParameters['questionnaireId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateQuestionnaireCommandToJSON(requestParameters['updateQuestionnaireCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionnaireDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async questionnairesUpdateQuestionnaire(requestParameters: QuestionnairesUpdateQuestionnaireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionnaireDetailsDto> {
        const response = await this.questionnairesUpdateQuestionnaireRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
