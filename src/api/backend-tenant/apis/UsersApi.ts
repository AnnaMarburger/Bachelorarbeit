/* tslint:disable */
/* eslint-disable */
/**
 * HSP Backend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateUserCommand,
  PaginatedListOfTenantAdministratorDto,
  PaginatedListOfTenantParticipantDto,
  PaginatedListOfUserDto,
  Permission,
  ProblemDetails,
  SortingParameter,
  TenantAdministratorDto,
  TenantParticipantDto,
  UpdateUserCommand,
  UserDto,
} from '../models/index';
import {
    CreateUserCommandFromJSON,
    CreateUserCommandToJSON,
    PaginatedListOfTenantAdministratorDtoFromJSON,
    PaginatedListOfTenantAdministratorDtoToJSON,
    PaginatedListOfTenantParticipantDtoFromJSON,
    PaginatedListOfTenantParticipantDtoToJSON,
    PaginatedListOfUserDtoFromJSON,
    PaginatedListOfUserDtoToJSON,
    PermissionFromJSON,
    PermissionToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    SortingParameterFromJSON,
    SortingParameterToJSON,
    TenantAdministratorDtoFromJSON,
    TenantAdministratorDtoToJSON,
    TenantParticipantDtoFromJSON,
    TenantParticipantDtoToJSON,
    UpdateUserCommandFromJSON,
    UpdateUserCommandToJSON,
    UserDtoFromJSON,
    UserDtoToJSON,
} from '../models/index';

export interface UsersAddAdministratorRequest {
    userId: string;
}

export interface UsersAddParticipantRequest {
    userId: string;
}

export interface UsersAddUserRequest {
    userId: string;
}

export interface UsersCreateUserRequest {
    createUserCommand: CreateUserCommand;
}

export interface UsersExistsRequest {
    userId: string;
}

export interface UsersGetAdministratorRequest {
    userId: string;
}

export interface UsersGetAdministratorsRequest {
    pageNumber?: number;
    pageSize?: number;
    sorting?: Array<SortingParameter>;
    search?: string;
}

export interface UsersGetParticipantRequest {
    userId: string;
}

export interface UsersGetParticipantsRequest {
    pageNumber?: number;
    pageSize?: number;
    sorting?: Array<SortingParameter>;
    search?: string;
}

export interface UsersGetUserRequest {
    userId: string;
}

export interface UsersGetUsersRequest {
    pageNumber?: number;
    pageSize?: number;
    sorting?: Array<SortingParameter>;
    search?: string;
}

export interface UsersRemoveAdministratorRequest {
    userId: string;
}

export interface UsersRemoveParticipantRequest {
    userId: string;
}

export interface UsersRemoveUserRequest {
    userId: string;
}

export interface UsersSendRegistrationMailRequest {
    userId: string;
}

export interface UsersUpdateAdministratorPermissionsRequest {
    userId: string;
    permission: Array<Permission>;
}

export interface UsersUpdateUserRequest {
    userId: string;
    updateUserCommand: UpdateUserCommand;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     */
    async usersAddAdministratorRaw(requestParameters: UsersAddAdministratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling usersAddAdministrator().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/administrators/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersAddAdministrator(requestParameters: UsersAddAdministratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersAddAdministratorRaw(requestParameters, initOverrides);
    }

    /**
     */
    async usersAddParticipantRaw(requestParameters: UsersAddParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling usersAddParticipant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/participants/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersAddParticipant(requestParameters: UsersAddParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersAddParticipantRaw(requestParameters, initOverrides);
    }

    /**
     */
    async usersAddUserRaw(requestParameters: UsersAddUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling usersAddUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersAddUser(requestParameters: UsersAddUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersAddUserRaw(requestParameters, initOverrides);
    }

    /**
     */
    async usersCreateUserRaw(requestParameters: UsersCreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDto>> {
        if (requestParameters['createUserCommand'] == null) {
            throw new runtime.RequiredError(
                'createUserCommand',
                'Required parameter "createUserCommand" was null or undefined when calling usersCreateUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserCommandToJSON(requestParameters['createUserCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDtoFromJSON(jsonValue));
    }

    /**
     */
    async usersCreateUser(requestParameters: UsersCreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDto> {
        const response = await this.usersCreateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersExistsRaw(requestParameters: UsersExistsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling usersExists().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}/exists`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async usersExists(requestParameters: UsersExistsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.usersExistsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersGetAdministratorRaw(requestParameters: UsersGetAdministratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantAdministratorDto>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling usersGetAdministrator().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/administrators/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantAdministratorDtoFromJSON(jsonValue));
    }

    /**
     */
    async usersGetAdministrator(requestParameters: UsersGetAdministratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantAdministratorDto> {
        const response = await this.usersGetAdministratorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersGetAdministratorsRaw(requestParameters: UsersGetAdministratorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfTenantAdministratorDto>> {
        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sorting'] != null) {
            queryParameters['sorting'] = requestParameters['sorting'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/administrators`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfTenantAdministratorDtoFromJSON(jsonValue));
    }

    /**
     */
    async usersGetAdministrators(requestParameters: UsersGetAdministratorsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfTenantAdministratorDto> {
        const response = await this.usersGetAdministratorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersGetParticipantRaw(requestParameters: UsersGetParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantParticipantDto>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling usersGetParticipant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/participants/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantParticipantDtoFromJSON(jsonValue));
    }

    /**
     */
    async usersGetParticipant(requestParameters: UsersGetParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantParticipantDto> {
        const response = await this.usersGetParticipantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersGetParticipantsRaw(requestParameters: UsersGetParticipantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfTenantParticipantDto>> {
        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sorting'] != null) {
            queryParameters['sorting'] = requestParameters['sorting'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/participants`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfTenantParticipantDtoFromJSON(jsonValue));
    }

    /**
     */
    async usersGetParticipants(requestParameters: UsersGetParticipantsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfTenantParticipantDto> {
        const response = await this.usersGetParticipantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersGetUserRaw(requestParameters: UsersGetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDto>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling usersGetUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDtoFromJSON(jsonValue));
    }

    /**
     */
    async usersGetUser(requestParameters: UsersGetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDto> {
        const response = await this.usersGetUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersGetUsersRaw(requestParameters: UsersGetUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfUserDto>> {
        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sorting'] != null) {
            queryParameters['sorting'] = requestParameters['sorting'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfUserDtoFromJSON(jsonValue));
    }

    /**
     */
    async usersGetUsers(requestParameters: UsersGetUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfUserDto> {
        const response = await this.usersGetUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersRemoveAdministratorRaw(requestParameters: UsersRemoveAdministratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling usersRemoveAdministrator().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/administrators/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersRemoveAdministrator(requestParameters: UsersRemoveAdministratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersRemoveAdministratorRaw(requestParameters, initOverrides);
    }

    /**
     */
    async usersRemoveParticipantRaw(requestParameters: UsersRemoveParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling usersRemoveParticipant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/participants/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersRemoveParticipant(requestParameters: UsersRemoveParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersRemoveParticipantRaw(requestParameters, initOverrides);
    }

    /**
     */
    async usersRemoveUserRaw(requestParameters: UsersRemoveUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling usersRemoveUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersRemoveUser(requestParameters: UsersRemoveUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersRemoveUserRaw(requestParameters, initOverrides);
    }

    /**
     */
    async usersSendRegistrationMailRaw(requestParameters: UsersSendRegistrationMailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling usersSendRegistrationMail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}/registrationmail`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersSendRegistrationMail(requestParameters: UsersSendRegistrationMailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersSendRegistrationMailRaw(requestParameters, initOverrides);
    }

    /**
     */
    async usersUpdateAdministratorPermissionsRaw(requestParameters: UsersUpdateAdministratorPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling usersUpdateAdministratorPermissions().'
            );
        }

        if (requestParameters['permission'] == null) {
            throw new runtime.RequiredError(
                'permission',
                'Required parameter "permission" was null or undefined when calling usersUpdateAdministratorPermissions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/administrators/{userId}/permissions`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['permission']!.map(PermissionToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersUpdateAdministratorPermissions(requestParameters: UsersUpdateAdministratorPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersUpdateAdministratorPermissionsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async usersUpdateUserRaw(requestParameters: UsersUpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDto>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling usersUpdateUser().'
            );
        }

        if (requestParameters['updateUserCommand'] == null) {
            throw new runtime.RequiredError(
                'updateUserCommand',
                'Required parameter "updateUserCommand" was null or undefined when calling usersUpdateUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserCommandToJSON(requestParameters['updateUserCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDtoFromJSON(jsonValue));
    }

    /**
     */
    async usersUpdateUser(requestParameters: UsersUpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDto> {
        const response = await this.usersUpdateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
