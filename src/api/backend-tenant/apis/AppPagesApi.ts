/* tslint:disable */
/* eslint-disable */
/**
 * HSP Backend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppPageDetailsDto,
  AppPageDto,
  ContentDto,
  CreateAppPageCommand,
  ElementType,
  MoveAppPageCommand,
  ProblemDetails,
  UpdateAppPageCommand,
} from '../models/index';
import {
    AppPageDetailsDtoFromJSON,
    AppPageDetailsDtoToJSON,
    AppPageDtoFromJSON,
    AppPageDtoToJSON,
    ContentDtoFromJSON,
    ContentDtoToJSON,
    CreateAppPageCommandFromJSON,
    CreateAppPageCommandToJSON,
    ElementTypeFromJSON,
    ElementTypeToJSON,
    MoveAppPageCommandFromJSON,
    MoveAppPageCommandToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    UpdateAppPageCommandFromJSON,
    UpdateAppPageCommandToJSON,
} from '../models/index';

export interface AppPagesCreateAppPageRequest {
    createAppPageCommand: CreateAppPageCommand;
}

export interface AppPagesDeleteAppPageRequest {
    appPageId: string;
}

export interface AppPagesGetAppPageRequest {
    appPageId: string;
    appPageVersion?: number;
}

export interface AppPagesGetAppPagesRequest {
    projectIds?: Array<string>;
    appPageIds?: Array<string>;
}

export interface AppPagesGetContentsRequest {
    limit?: number;
    search?: string;
    types?: Array<ElementType>;
    excludeTypes?: Array<ElementType>;
    projectIds?: Array<string>;
    containerIds?: Array<string>;
    excludeContainerIds?: Array<string>;
    contentIds?: Array<string>;
}

export interface AppPagesMoveAppPageRequest {
    appPageId: string;
    moveAppPageCommand: MoveAppPageCommand;
}

export interface AppPagesPublishAppPageRequest {
    appPageId: string;
}

export interface AppPagesUnpublishAppPageRequest {
    appPageId: string;
}

export interface AppPagesUpdateAppPageRequest {
    appPageId: string;
    updateAppPageCommand: UpdateAppPageCommand;
}

/**
 * 
 */
export class AppPagesApi extends runtime.BaseAPI {

    /**
     */
    async appPagesCreateAppPageRaw(requestParameters: AppPagesCreateAppPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppPageDetailsDto>> {
        if (requestParameters['createAppPageCommand'] == null) {
            throw new runtime.RequiredError(
                'createAppPageCommand',
                'Required parameter "createAppPageCommand" was null or undefined when calling appPagesCreateAppPage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/app-pages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAppPageCommandToJSON(requestParameters['createAppPageCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppPageDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async appPagesCreateAppPage(requestParameters: AppPagesCreateAppPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppPageDetailsDto> {
        const response = await this.appPagesCreateAppPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appPagesDeleteAppPageRaw(requestParameters: AppPagesDeleteAppPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['appPageId'] == null) {
            throw new runtime.RequiredError(
                'appPageId',
                'Required parameter "appPageId" was null or undefined when calling appPagesDeleteAppPage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/app-pages/{appPageId}`.replace(`{${"appPageId"}}`, encodeURIComponent(String(requestParameters['appPageId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appPagesDeleteAppPage(requestParameters: AppPagesDeleteAppPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appPagesDeleteAppPageRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appPagesGetAppPageRaw(requestParameters: AppPagesGetAppPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppPageDetailsDto>> {
        if (requestParameters['appPageId'] == null) {
            throw new runtime.RequiredError(
                'appPageId',
                'Required parameter "appPageId" was null or undefined when calling appPagesGetAppPage().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['appPageVersion'] != null) {
            queryParameters['appPageVersion'] = requestParameters['appPageVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/app-pages/{appPageId}`.replace(`{${"appPageId"}}`, encodeURIComponent(String(requestParameters['appPageId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppPageDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async appPagesGetAppPage(requestParameters: AppPagesGetAppPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppPageDetailsDto> {
        const response = await this.appPagesGetAppPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appPagesGetAppPagesRaw(requestParameters: AppPagesGetAppPagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AppPageDto>>> {
        const queryParameters: any = {};

        if (requestParameters['projectIds'] != null) {
            queryParameters['projectIds'] = requestParameters['projectIds'];
        }

        if (requestParameters['appPageIds'] != null) {
            queryParameters['appPageIds'] = requestParameters['appPageIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/app-pages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AppPageDtoFromJSON));
    }

    /**
     */
    async appPagesGetAppPages(requestParameters: AppPagesGetAppPagesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AppPageDto>> {
        const response = await this.appPagesGetAppPagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appPagesGetContentsRaw(requestParameters: AppPagesGetContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ContentDto>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['types'] != null) {
            queryParameters['types'] = requestParameters['types'];
        }

        if (requestParameters['excludeTypes'] != null) {
            queryParameters['excludeTypes'] = requestParameters['excludeTypes'];
        }

        if (requestParameters['projectIds'] != null) {
            queryParameters['projectIds'] = requestParameters['projectIds'];
        }

        if (requestParameters['containerIds'] != null) {
            queryParameters['containerIds'] = requestParameters['containerIds'];
        }

        if (requestParameters['excludeContainerIds'] != null) {
            queryParameters['excludeContainerIds'] = requestParameters['excludeContainerIds'];
        }

        if (requestParameters['contentIds'] != null) {
            queryParameters['contentIds'] = requestParameters['contentIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/app-pages/contents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContentDtoFromJSON));
    }

    /**
     */
    async appPagesGetContents(requestParameters: AppPagesGetContentsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ContentDto>> {
        const response = await this.appPagesGetContentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appPagesMoveAppPageRaw(requestParameters: AppPagesMoveAppPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['appPageId'] == null) {
            throw new runtime.RequiredError(
                'appPageId',
                'Required parameter "appPageId" was null or undefined when calling appPagesMoveAppPage().'
            );
        }

        if (requestParameters['moveAppPageCommand'] == null) {
            throw new runtime.RequiredError(
                'moveAppPageCommand',
                'Required parameter "moveAppPageCommand" was null or undefined when calling appPagesMoveAppPage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/app-pages/{appPageId}/move`.replace(`{${"appPageId"}}`, encodeURIComponent(String(requestParameters['appPageId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MoveAppPageCommandToJSON(requestParameters['moveAppPageCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appPagesMoveAppPage(requestParameters: AppPagesMoveAppPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appPagesMoveAppPageRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appPagesPublishAppPageRaw(requestParameters: AppPagesPublishAppPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['appPageId'] == null) {
            throw new runtime.RequiredError(
                'appPageId',
                'Required parameter "appPageId" was null or undefined when calling appPagesPublishAppPage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/app-pages/{appPageId}/publish`.replace(`{${"appPageId"}}`, encodeURIComponent(String(requestParameters['appPageId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appPagesPublishAppPage(requestParameters: AppPagesPublishAppPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appPagesPublishAppPageRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appPagesUnpublishAppPageRaw(requestParameters: AppPagesUnpublishAppPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['appPageId'] == null) {
            throw new runtime.RequiredError(
                'appPageId',
                'Required parameter "appPageId" was null or undefined when calling appPagesUnpublishAppPage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/app-pages/{appPageId}/unpublish`.replace(`{${"appPageId"}}`, encodeURIComponent(String(requestParameters['appPageId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appPagesUnpublishAppPage(requestParameters: AppPagesUnpublishAppPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appPagesUnpublishAppPageRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appPagesUpdateAppPageRaw(requestParameters: AppPagesUpdateAppPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppPageDetailsDto>> {
        if (requestParameters['appPageId'] == null) {
            throw new runtime.RequiredError(
                'appPageId',
                'Required parameter "appPageId" was null or undefined when calling appPagesUpdateAppPage().'
            );
        }

        if (requestParameters['updateAppPageCommand'] == null) {
            throw new runtime.RequiredError(
                'updateAppPageCommand',
                'Required parameter "updateAppPageCommand" was null or undefined when calling appPagesUpdateAppPage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/app-pages/{appPageId}`.replace(`{${"appPageId"}}`, encodeURIComponent(String(requestParameters['appPageId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAppPageCommandToJSON(requestParameters['updateAppPageCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppPageDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async appPagesUpdateAppPage(requestParameters: AppPagesUpdateAppPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppPageDetailsDto> {
        const response = await this.appPagesUpdateAppPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
