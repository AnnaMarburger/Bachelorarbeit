/* tslint:disable */
/* eslint-disable */
/**
 * HSP Backend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AnswerStatisticsDto,
  ParticipantStatisticsDto,
  ProblemDetails,
  QuestionStatisticsDto,
  QuestionnaireInstanceStatisticsDto,
  QuestionnaireStatisticsDto,
  StudyStatisticsDto,
} from '../models/index';
import {
    AnswerStatisticsDtoFromJSON,
    AnswerStatisticsDtoToJSON,
    ParticipantStatisticsDtoFromJSON,
    ParticipantStatisticsDtoToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    QuestionStatisticsDtoFromJSON,
    QuestionStatisticsDtoToJSON,
    QuestionnaireInstanceStatisticsDtoFromJSON,
    QuestionnaireInstanceStatisticsDtoToJSON,
    QuestionnaireStatisticsDtoFromJSON,
    QuestionnaireStatisticsDtoToJSON,
    StudyStatisticsDtoFromJSON,
    StudyStatisticsDtoToJSON,
} from '../models/index';

export interface StatisticsGetAnswerStatisticsRequest {
    projectIds?: Array<string>;
    questionnaireIds?: Array<string>;
    questionnaireInstanceIds?: Array<string>;
    questionIds?: Array<string>;
    answerIds?: Array<string>;
    from?: Date;
    until?: Date;
}

export interface StatisticsGetParticipantStatisticsRequest {
    projectIds?: Array<string>;
    participantIds?: Array<string>;
}

export interface StatisticsGetQuestionStatisticsRequest {
    projectIds?: Array<string>;
    questionnaireIds?: Array<string>;
    questionIds?: Array<string>;
}

export interface StatisticsGetQuestionnaireInstanceStatisticsRequest {
    projectIds?: Array<string>;
    questionnaireIds?: Array<string>;
    questionnaireInstanceIds?: Array<string>;
    from?: Date;
    until?: Date;
}

export interface StatisticsGetQuestionnaireStatisticsRequest {
    projectIds?: Array<string>;
    questionnaireIds?: Array<string>;
}

export interface StatisticsGetStudyStatisticsRequest {
    projectIds?: Array<string>;
}

/**
 * 
 */
export class StatisticsApi extends runtime.BaseAPI {

    /**
     */
    async statisticsGetAnswerStatisticsRaw(requestParameters: StatisticsGetAnswerStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnswerStatisticsDto>> {
        const queryParameters: any = {};

        if (requestParameters['projectIds'] != null) {
            queryParameters['projectIds'] = requestParameters['projectIds'];
        }

        if (requestParameters['questionnaireIds'] != null) {
            queryParameters['questionnaireIds'] = requestParameters['questionnaireIds'];
        }

        if (requestParameters['questionnaireInstanceIds'] != null) {
            queryParameters['questionnaireInstanceIds'] = requestParameters['questionnaireInstanceIds'];
        }

        if (requestParameters['questionIds'] != null) {
            queryParameters['questionIds'] = requestParameters['questionIds'];
        }

        if (requestParameters['answerIds'] != null) {
            queryParameters['answerIds'] = requestParameters['answerIds'];
        }

        if (requestParameters['from'] != null) {
            queryParameters['from'] = (requestParameters['from'] as any).toISOString();
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = (requestParameters['until'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/statistics/answers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnswerStatisticsDtoFromJSON(jsonValue));
    }

    /**
     */
    async statisticsGetAnswerStatistics(requestParameters: StatisticsGetAnswerStatisticsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnswerStatisticsDto> {
        const response = await this.statisticsGetAnswerStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async statisticsGetParticipantStatisticsRaw(requestParameters: StatisticsGetParticipantStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ParticipantStatisticsDto>> {
        const queryParameters: any = {};

        if (requestParameters['projectIds'] != null) {
            queryParameters['projectIds'] = requestParameters['projectIds'];
        }

        if (requestParameters['participantIds'] != null) {
            queryParameters['participantIds'] = requestParameters['participantIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/statistics/participants`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ParticipantStatisticsDtoFromJSON(jsonValue));
    }

    /**
     */
    async statisticsGetParticipantStatistics(requestParameters: StatisticsGetParticipantStatisticsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ParticipantStatisticsDto> {
        const response = await this.statisticsGetParticipantStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async statisticsGetQuestionStatisticsRaw(requestParameters: StatisticsGetQuestionStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionStatisticsDto>> {
        const queryParameters: any = {};

        if (requestParameters['projectIds'] != null) {
            queryParameters['projectIds'] = requestParameters['projectIds'];
        }

        if (requestParameters['questionnaireIds'] != null) {
            queryParameters['questionnaireIds'] = requestParameters['questionnaireIds'];
        }

        if (requestParameters['questionIds'] != null) {
            queryParameters['questionIds'] = requestParameters['questionIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/statistics/questions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionStatisticsDtoFromJSON(jsonValue));
    }

    /**
     */
    async statisticsGetQuestionStatistics(requestParameters: StatisticsGetQuestionStatisticsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionStatisticsDto> {
        const response = await this.statisticsGetQuestionStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async statisticsGetQuestionnaireInstanceStatisticsRaw(requestParameters: StatisticsGetQuestionnaireInstanceStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionnaireInstanceStatisticsDto>> {
        const queryParameters: any = {};

        if (requestParameters['projectIds'] != null) {
            queryParameters['projectIds'] = requestParameters['projectIds'];
        }

        if (requestParameters['questionnaireIds'] != null) {
            queryParameters['questionnaireIds'] = requestParameters['questionnaireIds'];
        }

        if (requestParameters['questionnaireInstanceIds'] != null) {
            queryParameters['questionnaireInstanceIds'] = requestParameters['questionnaireInstanceIds'];
        }

        if (requestParameters['from'] != null) {
            queryParameters['from'] = (requestParameters['from'] as any).toISOString();
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = (requestParameters['until'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/statistics/questionnaire-instances`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionnaireInstanceStatisticsDtoFromJSON(jsonValue));
    }

    /**
     */
    async statisticsGetQuestionnaireInstanceStatistics(requestParameters: StatisticsGetQuestionnaireInstanceStatisticsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionnaireInstanceStatisticsDto> {
        const response = await this.statisticsGetQuestionnaireInstanceStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async statisticsGetQuestionnaireStatisticsRaw(requestParameters: StatisticsGetQuestionnaireStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionnaireStatisticsDto>> {
        const queryParameters: any = {};

        if (requestParameters['projectIds'] != null) {
            queryParameters['projectIds'] = requestParameters['projectIds'];
        }

        if (requestParameters['questionnaireIds'] != null) {
            queryParameters['questionnaireIds'] = requestParameters['questionnaireIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/statistics/questionnaires`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionnaireStatisticsDtoFromJSON(jsonValue));
    }

    /**
     */
    async statisticsGetQuestionnaireStatistics(requestParameters: StatisticsGetQuestionnaireStatisticsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionnaireStatisticsDto> {
        const response = await this.statisticsGetQuestionnaireStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async statisticsGetStudyStatisticsRaw(requestParameters: StatisticsGetStudyStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StudyStatisticsDto>> {
        const queryParameters: any = {};

        if (requestParameters['projectIds'] != null) {
            queryParameters['projectIds'] = requestParameters['projectIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/statistics/studies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudyStatisticsDtoFromJSON(jsonValue));
    }

    /**
     */
    async statisticsGetStudyStatistics(requestParameters: StatisticsGetStudyStatisticsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StudyStatisticsDto> {
        const response = await this.statisticsGetStudyStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
