/* tslint:disable */
/* eslint-disable */
/**
 * HSP Backend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssetDto,
  AssetFolderDetailsDto,
  AssetFolderDto,
  CreateAssetCommand,
  CreateAssetFolderCommand,
  MoveAssetCommand,
  MoveAssetFolderCommand,
  PaginatedListOfAssetDto,
  ProblemDetails,
  SortingParameter,
  UpdateAssetCommand,
  UpdateAssetFolderCommand,
} from '../models/index';
import {
    AssetDtoFromJSON,
    AssetDtoToJSON,
    AssetFolderDetailsDtoFromJSON,
    AssetFolderDetailsDtoToJSON,
    AssetFolderDtoFromJSON,
    AssetFolderDtoToJSON,
    CreateAssetCommandFromJSON,
    CreateAssetCommandToJSON,
    CreateAssetFolderCommandFromJSON,
    CreateAssetFolderCommandToJSON,
    MoveAssetCommandFromJSON,
    MoveAssetCommandToJSON,
    MoveAssetFolderCommandFromJSON,
    MoveAssetFolderCommandToJSON,
    PaginatedListOfAssetDtoFromJSON,
    PaginatedListOfAssetDtoToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    SortingParameterFromJSON,
    SortingParameterToJSON,
    UpdateAssetCommandFromJSON,
    UpdateAssetCommandToJSON,
    UpdateAssetFolderCommandFromJSON,
    UpdateAssetFolderCommandToJSON,
} from '../models/index';

export interface AssetsCreateAssetRequest {
    createAssetCommand: CreateAssetCommand;
}

export interface AssetsCreateAssetFolderRequest {
    createAssetFolderCommand: CreateAssetFolderCommand;
}

export interface AssetsDeleteAssetRequest {
    assetId: string;
}

export interface AssetsDeleteAssetFolderRequest {
    assetFolderId: string;
}

export interface AssetsGetAssetRequest {
    assetId: string;
}

export interface AssetsGetAssetFolderRequest {
    assetFolderId: string;
}

export interface AssetsGetAssetsRequest {
    pageNumber?: number;
    pageSize?: number;
    sorting?: Array<SortingParameter>;
    search?: string;
    assetIds?: Array<string>;
}

export interface AssetsMoveAssetRequest {
    assetId: string;
    moveAssetCommand: MoveAssetCommand;
}

export interface AssetsMoveAssetFolderRequest {
    assetFolderId: string;
    moveAssetFolderCommand: MoveAssetFolderCommand;
}

export interface AssetsUpdateAssetRequest {
    assetId: string;
    updateAssetCommand: UpdateAssetCommand;
}

export interface AssetsUpdateAssetFolderRequest {
    assetFolderId: string;
    updateAssetFolderCommand: UpdateAssetFolderCommand;
}

/**
 * 
 */
export class AssetsApi extends runtime.BaseAPI {

    /**
     */
    async assetsCreateAssetRaw(requestParameters: AssetsCreateAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetDto>> {
        if (requestParameters['createAssetCommand'] == null) {
            throw new runtime.RequiredError(
                'createAssetCommand',
                'Required parameter "createAssetCommand" was null or undefined when calling assetsCreateAsset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/assets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAssetCommandToJSON(requestParameters['createAssetCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetDtoFromJSON(jsonValue));
    }

    /**
     */
    async assetsCreateAsset(requestParameters: AssetsCreateAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetDto> {
        const response = await this.assetsCreateAssetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async assetsCreateAssetFolderRaw(requestParameters: AssetsCreateAssetFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetFolderDto>> {
        if (requestParameters['createAssetFolderCommand'] == null) {
            throw new runtime.RequiredError(
                'createAssetFolderCommand',
                'Required parameter "createAssetFolderCommand" was null or undefined when calling assetsCreateAssetFolder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/assets/folders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAssetFolderCommandToJSON(requestParameters['createAssetFolderCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFolderDtoFromJSON(jsonValue));
    }

    /**
     */
    async assetsCreateAssetFolder(requestParameters: AssetsCreateAssetFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetFolderDto> {
        const response = await this.assetsCreateAssetFolderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async assetsDeleteAssetRaw(requestParameters: AssetsDeleteAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling assetsDeleteAsset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/assets/{assetId}`.replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters['assetId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async assetsDeleteAsset(requestParameters: AssetsDeleteAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetsDeleteAssetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async assetsDeleteAssetFolderRaw(requestParameters: AssetsDeleteAssetFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['assetFolderId'] == null) {
            throw new runtime.RequiredError(
                'assetFolderId',
                'Required parameter "assetFolderId" was null or undefined when calling assetsDeleteAssetFolder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/assets/folders/{assetFolderId}`.replace(`{${"assetFolderId"}}`, encodeURIComponent(String(requestParameters['assetFolderId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async assetsDeleteAssetFolder(requestParameters: AssetsDeleteAssetFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetsDeleteAssetFolderRaw(requestParameters, initOverrides);
    }

    /**
     */
    async assetsGetAssetRaw(requestParameters: AssetsGetAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetDto>> {
        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling assetsGetAsset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/assets/{assetId}`.replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters['assetId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetDtoFromJSON(jsonValue));
    }

    /**
     */
    async assetsGetAsset(requestParameters: AssetsGetAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetDto> {
        const response = await this.assetsGetAssetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async assetsGetAssetFolderRaw(requestParameters: AssetsGetAssetFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetFolderDetailsDto>> {
        if (requestParameters['assetFolderId'] == null) {
            throw new runtime.RequiredError(
                'assetFolderId',
                'Required parameter "assetFolderId" was null or undefined when calling assetsGetAssetFolder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/assets/folders/{assetFolderId}`.replace(`{${"assetFolderId"}}`, encodeURIComponent(String(requestParameters['assetFolderId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFolderDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async assetsGetAssetFolder(requestParameters: AssetsGetAssetFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetFolderDetailsDto> {
        const response = await this.assetsGetAssetFolderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async assetsGetAssetFoldersRootRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetFolderDetailsDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/assets/folders/root`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFolderDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async assetsGetAssetFoldersRoot(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetFolderDetailsDto> {
        const response = await this.assetsGetAssetFoldersRootRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async assetsGetAssetsRaw(requestParameters: AssetsGetAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfAssetDto>> {
        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sorting'] != null) {
            queryParameters['sorting'] = requestParameters['sorting'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['assetIds'] != null) {
            queryParameters['assetIds'] = requestParameters['assetIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/assets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfAssetDtoFromJSON(jsonValue));
    }

    /**
     */
    async assetsGetAssets(requestParameters: AssetsGetAssetsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfAssetDto> {
        const response = await this.assetsGetAssetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async assetsMoveAssetRaw(requestParameters: AssetsMoveAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling assetsMoveAsset().'
            );
        }

        if (requestParameters['moveAssetCommand'] == null) {
            throw new runtime.RequiredError(
                'moveAssetCommand',
                'Required parameter "moveAssetCommand" was null or undefined when calling assetsMoveAsset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/assets/{assetId}/move`.replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters['assetId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MoveAssetCommandToJSON(requestParameters['moveAssetCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async assetsMoveAsset(requestParameters: AssetsMoveAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetsMoveAssetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async assetsMoveAssetFolderRaw(requestParameters: AssetsMoveAssetFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['assetFolderId'] == null) {
            throw new runtime.RequiredError(
                'assetFolderId',
                'Required parameter "assetFolderId" was null or undefined when calling assetsMoveAssetFolder().'
            );
        }

        if (requestParameters['moveAssetFolderCommand'] == null) {
            throw new runtime.RequiredError(
                'moveAssetFolderCommand',
                'Required parameter "moveAssetFolderCommand" was null or undefined when calling assetsMoveAssetFolder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/assets/folders/{assetFolderId}/move`.replace(`{${"assetFolderId"}}`, encodeURIComponent(String(requestParameters['assetFolderId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MoveAssetFolderCommandToJSON(requestParameters['moveAssetFolderCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async assetsMoveAssetFolder(requestParameters: AssetsMoveAssetFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetsMoveAssetFolderRaw(requestParameters, initOverrides);
    }

    /**
     */
    async assetsUpdateAssetRaw(requestParameters: AssetsUpdateAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetDto>> {
        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling assetsUpdateAsset().'
            );
        }

        if (requestParameters['updateAssetCommand'] == null) {
            throw new runtime.RequiredError(
                'updateAssetCommand',
                'Required parameter "updateAssetCommand" was null or undefined when calling assetsUpdateAsset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/assets/{assetId}`.replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters['assetId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAssetCommandToJSON(requestParameters['updateAssetCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetDtoFromJSON(jsonValue));
    }

    /**
     */
    async assetsUpdateAsset(requestParameters: AssetsUpdateAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetDto> {
        const response = await this.assetsUpdateAssetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async assetsUpdateAssetFolderRaw(requestParameters: AssetsUpdateAssetFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetFolderDto>> {
        if (requestParameters['assetFolderId'] == null) {
            throw new runtime.RequiredError(
                'assetFolderId',
                'Required parameter "assetFolderId" was null or undefined when calling assetsUpdateAssetFolder().'
            );
        }

        if (requestParameters['updateAssetFolderCommand'] == null) {
            throw new runtime.RequiredError(
                'updateAssetFolderCommand',
                'Required parameter "updateAssetFolderCommand" was null or undefined when calling assetsUpdateAssetFolder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/assets/folders/{assetFolderId}`.replace(`{${"assetFolderId"}}`, encodeURIComponent(String(requestParameters['assetFolderId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAssetFolderCommandToJSON(requestParameters['updateAssetFolderCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFolderDtoFromJSON(jsonValue));
    }

    /**
     */
    async assetsUpdateAssetFolder(requestParameters: AssetsUpdateAssetFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetFolderDto> {
        const response = await this.assetsUpdateAssetFolderRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
