/* tslint:disable */
/* eslint-disable */
/**
 * HSP Backend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DeviceDetailsDto,
  PaginatedListOfDeviceDto,
  ProblemDetails,
  SortingParameter,
} from '../models/index';
import {
    DeviceDetailsDtoFromJSON,
    DeviceDetailsDtoToJSON,
    PaginatedListOfDeviceDtoFromJSON,
    PaginatedListOfDeviceDtoToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    SortingParameterFromJSON,
    SortingParameterToJSON,
} from '../models/index';

export interface DevicesGetDeviceRequest {
    deviceId: string;
}

export interface DevicesGetDevicesRequest {
    pageNumber?: number;
    pageSize?: number;
    sorting?: Array<SortingParameter>;
    search?: string;
}

/**
 * 
 */
export class DevicesApi extends runtime.BaseAPI {

    /**
     */
    async devicesGetDeviceRaw(requestParameters: DevicesGetDeviceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeviceDetailsDto>> {
        if (requestParameters['deviceId'] == null) {
            throw new runtime.RequiredError(
                'deviceId',
                'Required parameter "deviceId" was null or undefined when calling devicesGetDevice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/devices/{deviceId}`.replace(`{${"deviceId"}}`, encodeURIComponent(String(requestParameters['deviceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async devicesGetDevice(requestParameters: DevicesGetDeviceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeviceDetailsDto> {
        const response = await this.devicesGetDeviceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async devicesGetDevicesRaw(requestParameters: DevicesGetDevicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfDeviceDto>> {
        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sorting'] != null) {
            queryParameters['sorting'] = requestParameters['sorting'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/devices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfDeviceDtoFromJSON(jsonValue));
    }

    /**
     */
    async devicesGetDevices(requestParameters: DevicesGetDevicesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfDeviceDto> {
        const response = await this.devicesGetDevicesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
