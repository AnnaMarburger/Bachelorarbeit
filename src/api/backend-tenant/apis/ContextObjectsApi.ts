/* tslint:disable */
/* eslint-disable */
/**
 * HSP Backend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ContentDto,
  ContextObjectDetailsDto,
  ContextObjectDto,
  CreateContextObjectCommand,
  ElementType,
  PaginatedListOfContextObjectDto,
  ProblemDetails,
  SortingParameter,
  UpdateContextObjectCommand,
} from '../models/index';
import {
    ContentDtoFromJSON,
    ContentDtoToJSON,
    ContextObjectDetailsDtoFromJSON,
    ContextObjectDetailsDtoToJSON,
    ContextObjectDtoFromJSON,
    ContextObjectDtoToJSON,
    CreateContextObjectCommandFromJSON,
    CreateContextObjectCommandToJSON,
    ElementTypeFromJSON,
    ElementTypeToJSON,
    PaginatedListOfContextObjectDtoFromJSON,
    PaginatedListOfContextObjectDtoToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    SortingParameterFromJSON,
    SortingParameterToJSON,
    UpdateContextObjectCommandFromJSON,
    UpdateContextObjectCommandToJSON,
} from '../models/index';

export interface ContextObjectsCreateContextObjectRequest {
    createContextObjectCommand: CreateContextObjectCommand;
}

export interface ContextObjectsDeleteContextObjectRequest {
    contextObjectId: string;
}

export interface ContextObjectsGetContentsRequest {
    limit?: number;
    search?: string;
    types?: Array<ElementType>;
    excludeTypes?: Array<ElementType>;
    projectIds?: Array<string>;
    containerIds?: Array<string>;
    excludeContainerIds?: Array<string>;
    contentIds?: Array<string>;
}

export interface ContextObjectsGetContextObjectRequest {
    contextObjectId: string;
    contextObjectVersion?: number;
}

export interface ContextObjectsGetContextObjectsRequest {
    pageNumber?: number;
    pageSize?: number;
    sorting?: Array<SortingParameter>;
    search?: string;
    projectIds?: Array<string>;
}

export interface ContextObjectsPublishContextObjectRequest {
    contextObjectId: string;
}

export interface ContextObjectsUnpublishContextObjectRequest {
    contextObjectId: string;
}

export interface ContextObjectsUpdateContextObjectRequest {
    contextObjectId: string;
    updateContextObjectCommand: UpdateContextObjectCommand;
}

/**
 * 
 */
export class ContextObjectsApi extends runtime.BaseAPI {

    /**
     */
    async contextObjectsCreateContextObjectRaw(requestParameters: ContextObjectsCreateContextObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContextObjectDto>> {
        if (requestParameters['createContextObjectCommand'] == null) {
            throw new runtime.RequiredError(
                'createContextObjectCommand',
                'Required parameter "createContextObjectCommand" was null or undefined when calling contextObjectsCreateContextObject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/context-objects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateContextObjectCommandToJSON(requestParameters['createContextObjectCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextObjectDtoFromJSON(jsonValue));
    }

    /**
     */
    async contextObjectsCreateContextObject(requestParameters: ContextObjectsCreateContextObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContextObjectDto> {
        const response = await this.contextObjectsCreateContextObjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async contextObjectsDeleteContextObjectRaw(requestParameters: ContextObjectsDeleteContextObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['contextObjectId'] == null) {
            throw new runtime.RequiredError(
                'contextObjectId',
                'Required parameter "contextObjectId" was null or undefined when calling contextObjectsDeleteContextObject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/context-objects/{contextObjectId}`.replace(`{${"contextObjectId"}}`, encodeURIComponent(String(requestParameters['contextObjectId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async contextObjectsDeleteContextObject(requestParameters: ContextObjectsDeleteContextObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.contextObjectsDeleteContextObjectRaw(requestParameters, initOverrides);
    }

    /**
     */
    async contextObjectsGetContentsRaw(requestParameters: ContextObjectsGetContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ContentDto>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['types'] != null) {
            queryParameters['types'] = requestParameters['types'];
        }

        if (requestParameters['excludeTypes'] != null) {
            queryParameters['excludeTypes'] = requestParameters['excludeTypes'];
        }

        if (requestParameters['projectIds'] != null) {
            queryParameters['projectIds'] = requestParameters['projectIds'];
        }

        if (requestParameters['containerIds'] != null) {
            queryParameters['containerIds'] = requestParameters['containerIds'];
        }

        if (requestParameters['excludeContainerIds'] != null) {
            queryParameters['excludeContainerIds'] = requestParameters['excludeContainerIds'];
        }

        if (requestParameters['contentIds'] != null) {
            queryParameters['contentIds'] = requestParameters['contentIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/context-objects/contents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContentDtoFromJSON));
    }

    /**
     */
    async contextObjectsGetContents(requestParameters: ContextObjectsGetContentsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ContentDto>> {
        const response = await this.contextObjectsGetContentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async contextObjectsGetContextObjectRaw(requestParameters: ContextObjectsGetContextObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContextObjectDetailsDto>> {
        if (requestParameters['contextObjectId'] == null) {
            throw new runtime.RequiredError(
                'contextObjectId',
                'Required parameter "contextObjectId" was null or undefined when calling contextObjectsGetContextObject().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['contextObjectVersion'] != null) {
            queryParameters['contextObjectVersion'] = requestParameters['contextObjectVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/context-objects/{contextObjectId}`.replace(`{${"contextObjectId"}}`, encodeURIComponent(String(requestParameters['contextObjectId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextObjectDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async contextObjectsGetContextObject(requestParameters: ContextObjectsGetContextObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContextObjectDetailsDto> {
        const response = await this.contextObjectsGetContextObjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async contextObjectsGetContextObjectsRaw(requestParameters: ContextObjectsGetContextObjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfContextObjectDto>> {
        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sorting'] != null) {
            queryParameters['sorting'] = requestParameters['sorting'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['projectIds'] != null) {
            queryParameters['projectIds'] = requestParameters['projectIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/context-objects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfContextObjectDtoFromJSON(jsonValue));
    }

    /**
     */
    async contextObjectsGetContextObjects(requestParameters: ContextObjectsGetContextObjectsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfContextObjectDto> {
        const response = await this.contextObjectsGetContextObjectsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async contextObjectsPublishContextObjectRaw(requestParameters: ContextObjectsPublishContextObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['contextObjectId'] == null) {
            throw new runtime.RequiredError(
                'contextObjectId',
                'Required parameter "contextObjectId" was null or undefined when calling contextObjectsPublishContextObject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/context-objects/{contextObjectId}/publish`.replace(`{${"contextObjectId"}}`, encodeURIComponent(String(requestParameters['contextObjectId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async contextObjectsPublishContextObject(requestParameters: ContextObjectsPublishContextObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.contextObjectsPublishContextObjectRaw(requestParameters, initOverrides);
    }

    /**
     */
    async contextObjectsUnpublishContextObjectRaw(requestParameters: ContextObjectsUnpublishContextObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['contextObjectId'] == null) {
            throw new runtime.RequiredError(
                'contextObjectId',
                'Required parameter "contextObjectId" was null or undefined when calling contextObjectsUnpublishContextObject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/context-objects/{contextObjectId}/unpublish`.replace(`{${"contextObjectId"}}`, encodeURIComponent(String(requestParameters['contextObjectId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async contextObjectsUnpublishContextObject(requestParameters: ContextObjectsUnpublishContextObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.contextObjectsUnpublishContextObjectRaw(requestParameters, initOverrides);
    }

    /**
     */
    async contextObjectsUpdateContextObjectRaw(requestParameters: ContextObjectsUpdateContextObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContextObjectDetailsDto>> {
        if (requestParameters['contextObjectId'] == null) {
            throw new runtime.RequiredError(
                'contextObjectId',
                'Required parameter "contextObjectId" was null or undefined when calling contextObjectsUpdateContextObject().'
            );
        }

        if (requestParameters['updateContextObjectCommand'] == null) {
            throw new runtime.RequiredError(
                'updateContextObjectCommand',
                'Required parameter "updateContextObjectCommand" was null or undefined when calling contextObjectsUpdateContextObject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/context-objects/{contextObjectId}`.replace(`{${"contextObjectId"}}`, encodeURIComponent(String(requestParameters['contextObjectId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateContextObjectCommandToJSON(requestParameters['updateContextObjectCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextObjectDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async contextObjectsUpdateContextObject(requestParameters: ContextObjectsUpdateContextObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContextObjectDetailsDto> {
        const response = await this.contextObjectsUpdateContextObjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
