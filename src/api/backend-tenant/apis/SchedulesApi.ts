/* tslint:disable */
/* eslint-disable */
/**
 * HSP Backend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateScheduleCommand,
  PaginatedListOfScheduleDto,
  ProblemDetails,
  ScheduleDetailsDto,
  ScheduleDto,
  SortingParameter,
  UpdateScheduleCommand,
} from '../models/index';
import {
    CreateScheduleCommandFromJSON,
    CreateScheduleCommandToJSON,
    PaginatedListOfScheduleDtoFromJSON,
    PaginatedListOfScheduleDtoToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    ScheduleDetailsDtoFromJSON,
    ScheduleDetailsDtoToJSON,
    ScheduleDtoFromJSON,
    ScheduleDtoToJSON,
    SortingParameterFromJSON,
    SortingParameterToJSON,
    UpdateScheduleCommandFromJSON,
    UpdateScheduleCommandToJSON,
} from '../models/index';

export interface SchedulesActivateScheduleRequest {
    scheduleId: string;
}

export interface SchedulesCreateScheduleRequest {
    createScheduleCommand: CreateScheduleCommand;
}

export interface SchedulesDeactivateScheduleRequest {
    scheduleId: string;
}

export interface SchedulesDeleteScheduleRequest {
    scheduleId: string;
}

export interface SchedulesGetScheduleRequest {
    scheduleId: string;
    scheduleVersion?: number;
}

export interface SchedulesGetSchedulesRequest {
    pageNumber?: number;
    pageSize?: number;
    sorting?: Array<SortingParameter>;
    search?: string;
    projectIds?: Array<string>;
}

export interface SchedulesUpdateScheduleRequest {
    scheduleId: string;
    updateScheduleCommand: UpdateScheduleCommand;
}

/**
 * 
 */
export class SchedulesApi extends runtime.BaseAPI {

    /**
     */
    async schedulesActivateScheduleRaw(requestParameters: SchedulesActivateScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['scheduleId'] == null) {
            throw new runtime.RequiredError(
                'scheduleId',
                'Required parameter "scheduleId" was null or undefined when calling schedulesActivateSchedule().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/schedules/{scheduleId}/activate`.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters['scheduleId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async schedulesActivateSchedule(requestParameters: SchedulesActivateScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.schedulesActivateScheduleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async schedulesCreateScheduleRaw(requestParameters: SchedulesCreateScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScheduleDto>> {
        if (requestParameters['createScheduleCommand'] == null) {
            throw new runtime.RequiredError(
                'createScheduleCommand',
                'Required parameter "createScheduleCommand" was null or undefined when calling schedulesCreateSchedule().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/schedules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateScheduleCommandToJSON(requestParameters['createScheduleCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScheduleDtoFromJSON(jsonValue));
    }

    /**
     */
    async schedulesCreateSchedule(requestParameters: SchedulesCreateScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScheduleDto> {
        const response = await this.schedulesCreateScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async schedulesDeactivateScheduleRaw(requestParameters: SchedulesDeactivateScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['scheduleId'] == null) {
            throw new runtime.RequiredError(
                'scheduleId',
                'Required parameter "scheduleId" was null or undefined when calling schedulesDeactivateSchedule().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/schedules/{scheduleId}/deactivate`.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters['scheduleId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async schedulesDeactivateSchedule(requestParameters: SchedulesDeactivateScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.schedulesDeactivateScheduleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async schedulesDeleteScheduleRaw(requestParameters: SchedulesDeleteScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['scheduleId'] == null) {
            throw new runtime.RequiredError(
                'scheduleId',
                'Required parameter "scheduleId" was null or undefined when calling schedulesDeleteSchedule().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/schedules/{scheduleId}`.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters['scheduleId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async schedulesDeleteSchedule(requestParameters: SchedulesDeleteScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.schedulesDeleteScheduleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async schedulesGetScheduleRaw(requestParameters: SchedulesGetScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScheduleDetailsDto>> {
        if (requestParameters['scheduleId'] == null) {
            throw new runtime.RequiredError(
                'scheduleId',
                'Required parameter "scheduleId" was null or undefined when calling schedulesGetSchedule().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['scheduleVersion'] != null) {
            queryParameters['scheduleVersion'] = requestParameters['scheduleVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/schedules/{scheduleId}`.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters['scheduleId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScheduleDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async schedulesGetSchedule(requestParameters: SchedulesGetScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScheduleDetailsDto> {
        const response = await this.schedulesGetScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async schedulesGetSchedulesRaw(requestParameters: SchedulesGetSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfScheduleDto>> {
        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sorting'] != null) {
            queryParameters['sorting'] = requestParameters['sorting'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['projectIds'] != null) {
            queryParameters['projectIds'] = requestParameters['projectIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/schedules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfScheduleDtoFromJSON(jsonValue));
    }

    /**
     */
    async schedulesGetSchedules(requestParameters: SchedulesGetSchedulesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfScheduleDto> {
        const response = await this.schedulesGetSchedulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async schedulesUpdateScheduleRaw(requestParameters: SchedulesUpdateScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScheduleDetailsDto>> {
        if (requestParameters['scheduleId'] == null) {
            throw new runtime.RequiredError(
                'scheduleId',
                'Required parameter "scheduleId" was null or undefined when calling schedulesUpdateSchedule().'
            );
        }

        if (requestParameters['updateScheduleCommand'] == null) {
            throw new runtime.RequiredError(
                'updateScheduleCommand',
                'Required parameter "updateScheduleCommand" was null or undefined when calling schedulesUpdateSchedule().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/schedules/{scheduleId}`.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters['scheduleId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateScheduleCommandToJSON(requestParameters['updateScheduleCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScheduleDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async schedulesUpdateSchedule(requestParameters: SchedulesUpdateScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScheduleDetailsDto> {
        const response = await this.schedulesUpdateScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
