/* tslint:disable */
/* eslint-disable */
/**
 * HSP Backend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateFileFromBase64Command,
  CreateFileFromUrlCommand,
  FileDto,
  ProblemDetails,
} from '../models/index';
import {
    CreateFileFromBase64CommandFromJSON,
    CreateFileFromBase64CommandToJSON,
    CreateFileFromUrlCommandFromJSON,
    CreateFileFromUrlCommandToJSON,
    FileDtoFromJSON,
    FileDtoToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models/index';

export interface FilesCreateFileRequest {
    file?: Blob;
}

export interface FilesCreateFileFromBase64Request {
    createFileFromBase64Command: CreateFileFromBase64Command;
}

export interface FilesCreateFileFromUrlRequest {
    createFileFromUrlCommand: CreateFileFromUrlCommand;
}

export interface FilesGetFileRequest {
    fileId: string;
    size?: number;
    w?: number;
    h?: number;
    x?: number;
    y?: number;
    webp?: boolean;
}

export interface FilesGetFileDtoRequest {
    fileId: string;
}

/**
 * 
 */
export class FilesApi extends runtime.BaseAPI {

    /**
     */
    async filesCreateFileRaw(requestParameters: FilesCreateFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/api/v1/files`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileDtoFromJSON(jsonValue));
    }

    /**
     */
    async filesCreateFile(requestParameters: FilesCreateFileRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileDto> {
        const response = await this.filesCreateFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async filesCreateFileFromBase64Raw(requestParameters: FilesCreateFileFromBase64Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileDto>> {
        if (requestParameters['createFileFromBase64Command'] == null) {
            throw new runtime.RequiredError(
                'createFileFromBase64Command',
                'Required parameter "createFileFromBase64Command" was null or undefined when calling filesCreateFileFromBase64().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/files/base64`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFileFromBase64CommandToJSON(requestParameters['createFileFromBase64Command']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileDtoFromJSON(jsonValue));
    }

    /**
     */
    async filesCreateFileFromBase64(requestParameters: FilesCreateFileFromBase64Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileDto> {
        const response = await this.filesCreateFileFromBase64Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async filesCreateFileFromUrlRaw(requestParameters: FilesCreateFileFromUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileDto>> {
        if (requestParameters['createFileFromUrlCommand'] == null) {
            throw new runtime.RequiredError(
                'createFileFromUrlCommand',
                'Required parameter "createFileFromUrlCommand" was null or undefined when calling filesCreateFileFromUrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/files/url`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFileFromUrlCommandToJSON(requestParameters['createFileFromUrlCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileDtoFromJSON(jsonValue));
    }

    /**
     */
    async filesCreateFileFromUrl(requestParameters: FilesCreateFileFromUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileDto> {
        const response = await this.filesCreateFileFromUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async filesGetFileRaw(requestParameters: FilesGetFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['fileId'] == null) {
            throw new runtime.RequiredError(
                'fileId',
                'Required parameter "fileId" was null or undefined when calling filesGetFile().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['w'] != null) {
            queryParameters['w'] = requestParameters['w'];
        }

        if (requestParameters['h'] != null) {
            queryParameters['h'] = requestParameters['h'];
        }

        if (requestParameters['x'] != null) {
            queryParameters['x'] = requestParameters['x'];
        }

        if (requestParameters['y'] != null) {
            queryParameters['y'] = requestParameters['y'];
        }

        if (requestParameters['webp'] != null) {
            queryParameters['webp'] = requestParameters['webp'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/files/{fileId}`.replace(`{${"fileId"}}`, encodeURIComponent(String(requestParameters['fileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     */
    async filesGetFile(requestParameters: FilesGetFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.filesGetFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async filesGetFileDtoRaw(requestParameters: FilesGetFileDtoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileDto>> {
        if (requestParameters['fileId'] == null) {
            throw new runtime.RequiredError(
                'fileId',
                'Required parameter "fileId" was null or undefined when calling filesGetFileDto().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/files/{fileId}/dto`.replace(`{${"fileId"}}`, encodeURIComponent(String(requestParameters['fileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileDtoFromJSON(jsonValue));
    }

    /**
     */
    async filesGetFileDto(requestParameters: FilesGetFileDtoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileDto> {
        const response = await this.filesGetFileDtoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
