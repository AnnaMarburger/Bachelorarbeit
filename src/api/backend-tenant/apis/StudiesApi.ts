/* tslint:disable */
/* eslint-disable */
/**
 * HSP Backend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateStudyCommand,
  PaginatedListOfProjectAdministratorDto,
  PaginatedListOfProjectParticipantDto,
  PaginatedListOfStudyDto,
  Permission,
  ProblemDetails,
  ProjectAdministratorDto,
  ProjectParticipantDto,
  QrCodeDto,
  SortingParameter,
  StudyDetailsDto,
  StudyDto,
  UpdateStudyCommand,
} from '../models/index';
import {
    CreateStudyCommandFromJSON,
    CreateStudyCommandToJSON,
    PaginatedListOfProjectAdministratorDtoFromJSON,
    PaginatedListOfProjectAdministratorDtoToJSON,
    PaginatedListOfProjectParticipantDtoFromJSON,
    PaginatedListOfProjectParticipantDtoToJSON,
    PaginatedListOfStudyDtoFromJSON,
    PaginatedListOfStudyDtoToJSON,
    PermissionFromJSON,
    PermissionToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    ProjectAdministratorDtoFromJSON,
    ProjectAdministratorDtoToJSON,
    ProjectParticipantDtoFromJSON,
    ProjectParticipantDtoToJSON,
    QrCodeDtoFromJSON,
    QrCodeDtoToJSON,
    SortingParameterFromJSON,
    SortingParameterToJSON,
    StudyDetailsDtoFromJSON,
    StudyDetailsDtoToJSON,
    StudyDtoFromJSON,
    StudyDtoToJSON,
    UpdateStudyCommandFromJSON,
    UpdateStudyCommandToJSON,
} from '../models/index';

export interface StudiesAddAdministratorRequest {
    studyId: string;
    userId: string;
}

export interface StudiesAddParticipantRequest {
    studyId: string;
    userId: string;
}

export interface StudiesCreateStudyRequest {
    createStudyCommand: CreateStudyCommand;
}

export interface StudiesDeleteStudyRequest {
    studyId: string;
}

export interface StudiesGenerateJoinParticipantGroupQrCodeRequest {
    studyId: string;
    participantGroupId: string;
    appId: string;
}

export interface StudiesGetAdministratorRequest {
    studyId: string;
    userId: string;
}

export interface StudiesGetAdministratorsRequest {
    studyId: string;
    pageNumber?: number;
    pageSize?: number;
    sorting?: Array<SortingParameter>;
    search?: string;
}

export interface StudiesGetParticipantRequest {
    studyId: string;
    userId: string;
}

export interface StudiesGetParticipantsRequest {
    studyId: string;
    pageNumber?: number;
    pageSize?: number;
    sorting?: Array<SortingParameter>;
    search?: string;
}

export interface StudiesGetStudiesRequest {
    pageNumber?: number;
    pageSize?: number;
    sorting?: Array<SortingParameter>;
    search?: string;
}

export interface StudiesGetStudyRequest {
    studyId: string;
}

export interface StudiesPublishStudyRequest {
    studyId: string;
}

export interface StudiesRemoveAdministratorRequest {
    studyId: string;
    userId: string;
}

export interface StudiesRemoveParticipantRequest {
    studyId: string;
    userId: string;
}

export interface StudiesUnpublishStudyRequest {
    studyId: string;
}

export interface StudiesUpdateAdministratorPermissionsRequest {
    studyId: string;
    userId: string;
    permission: Array<Permission>;
}

export interface StudiesUpdateStudyRequest {
    studyId: string;
    updateStudyCommand: UpdateStudyCommand;
}

/**
 * 
 */
export class StudiesApi extends runtime.BaseAPI {

    /**
     */
    async studiesAddAdministratorRaw(requestParameters: StudiesAddAdministratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['studyId'] == null) {
            throw new runtime.RequiredError(
                'studyId',
                'Required parameter "studyId" was null or undefined when calling studiesAddAdministrator().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling studiesAddAdministrator().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/studies/{studyId}/administrators/{userId}`.replace(`{${"studyId"}}`, encodeURIComponent(String(requestParameters['studyId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async studiesAddAdministrator(requestParameters: StudiesAddAdministratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.studiesAddAdministratorRaw(requestParameters, initOverrides);
    }

    /**
     */
    async studiesAddParticipantRaw(requestParameters: StudiesAddParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['studyId'] == null) {
            throw new runtime.RequiredError(
                'studyId',
                'Required parameter "studyId" was null or undefined when calling studiesAddParticipant().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling studiesAddParticipant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/studies/{studyId}/participants/{userId}`.replace(`{${"studyId"}}`, encodeURIComponent(String(requestParameters['studyId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async studiesAddParticipant(requestParameters: StudiesAddParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.studiesAddParticipantRaw(requestParameters, initOverrides);
    }

    /**
     */
    async studiesCreateStudyRaw(requestParameters: StudiesCreateStudyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StudyDto>> {
        if (requestParameters['createStudyCommand'] == null) {
            throw new runtime.RequiredError(
                'createStudyCommand',
                'Required parameter "createStudyCommand" was null or undefined when calling studiesCreateStudy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/studies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateStudyCommandToJSON(requestParameters['createStudyCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudyDtoFromJSON(jsonValue));
    }

    /**
     */
    async studiesCreateStudy(requestParameters: StudiesCreateStudyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StudyDto> {
        const response = await this.studiesCreateStudyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async studiesDeleteStudyRaw(requestParameters: StudiesDeleteStudyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['studyId'] == null) {
            throw new runtime.RequiredError(
                'studyId',
                'Required parameter "studyId" was null or undefined when calling studiesDeleteStudy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/studies/{studyId}`.replace(`{${"studyId"}}`, encodeURIComponent(String(requestParameters['studyId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async studiesDeleteStudy(requestParameters: StudiesDeleteStudyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.studiesDeleteStudyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async studiesGenerateJoinParticipantGroupQrCodeRaw(requestParameters: StudiesGenerateJoinParticipantGroupQrCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QrCodeDto>> {
        if (requestParameters['studyId'] == null) {
            throw new runtime.RequiredError(
                'studyId',
                'Required parameter "studyId" was null or undefined when calling studiesGenerateJoinParticipantGroupQrCode().'
            );
        }

        if (requestParameters['participantGroupId'] == null) {
            throw new runtime.RequiredError(
                'participantGroupId',
                'Required parameter "participantGroupId" was null or undefined when calling studiesGenerateJoinParticipantGroupQrCode().'
            );
        }

        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling studiesGenerateJoinParticipantGroupQrCode().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['participantGroupId'] != null) {
            queryParameters['participantGroupId'] = requestParameters['participantGroupId'];
        }

        if (requestParameters['appId'] != null) {
            queryParameters['appId'] = requestParameters['appId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/studies/{studyId}/use-join-group-qr-code`.replace(`{${"studyId"}}`, encodeURIComponent(String(requestParameters['studyId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QrCodeDtoFromJSON(jsonValue));
    }

    /**
     */
    async studiesGenerateJoinParticipantGroupQrCode(requestParameters: StudiesGenerateJoinParticipantGroupQrCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QrCodeDto> {
        const response = await this.studiesGenerateJoinParticipantGroupQrCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async studiesGetAdministratorRaw(requestParameters: StudiesGetAdministratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectAdministratorDto>> {
        if (requestParameters['studyId'] == null) {
            throw new runtime.RequiredError(
                'studyId',
                'Required parameter "studyId" was null or undefined when calling studiesGetAdministrator().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling studiesGetAdministrator().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/studies/{studyId}/administrators/{userId}`.replace(`{${"studyId"}}`, encodeURIComponent(String(requestParameters['studyId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectAdministratorDtoFromJSON(jsonValue));
    }

    /**
     */
    async studiesGetAdministrator(requestParameters: StudiesGetAdministratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectAdministratorDto> {
        const response = await this.studiesGetAdministratorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async studiesGetAdministratorsRaw(requestParameters: StudiesGetAdministratorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfProjectAdministratorDto>> {
        if (requestParameters['studyId'] == null) {
            throw new runtime.RequiredError(
                'studyId',
                'Required parameter "studyId" was null or undefined when calling studiesGetAdministrators().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sorting'] != null) {
            queryParameters['sorting'] = requestParameters['sorting'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/studies/{studyId}/administrators`.replace(`{${"studyId"}}`, encodeURIComponent(String(requestParameters['studyId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfProjectAdministratorDtoFromJSON(jsonValue));
    }

    /**
     */
    async studiesGetAdministrators(requestParameters: StudiesGetAdministratorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfProjectAdministratorDto> {
        const response = await this.studiesGetAdministratorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async studiesGetParticipantRaw(requestParameters: StudiesGetParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectParticipantDto>> {
        if (requestParameters['studyId'] == null) {
            throw new runtime.RequiredError(
                'studyId',
                'Required parameter "studyId" was null or undefined when calling studiesGetParticipant().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling studiesGetParticipant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/studies/{studyId}/participants/{userId}`.replace(`{${"studyId"}}`, encodeURIComponent(String(requestParameters['studyId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectParticipantDtoFromJSON(jsonValue));
    }

    /**
     */
    async studiesGetParticipant(requestParameters: StudiesGetParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectParticipantDto> {
        const response = await this.studiesGetParticipantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async studiesGetParticipantsRaw(requestParameters: StudiesGetParticipantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfProjectParticipantDto>> {
        if (requestParameters['studyId'] == null) {
            throw new runtime.RequiredError(
                'studyId',
                'Required parameter "studyId" was null or undefined when calling studiesGetParticipants().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sorting'] != null) {
            queryParameters['sorting'] = requestParameters['sorting'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/studies/{studyId}/participants`.replace(`{${"studyId"}}`, encodeURIComponent(String(requestParameters['studyId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfProjectParticipantDtoFromJSON(jsonValue));
    }

    /**
     */
    async studiesGetParticipants(requestParameters: StudiesGetParticipantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfProjectParticipantDto> {
        const response = await this.studiesGetParticipantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async studiesGetStudiesRaw(requestParameters: StudiesGetStudiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfStudyDto>> {
        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sorting'] != null) {
            queryParameters['sorting'] = requestParameters['sorting'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/studies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfStudyDtoFromJSON(jsonValue));
    }

    /**
     */
    async studiesGetStudies(requestParameters: StudiesGetStudiesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfStudyDto> {
        const response = await this.studiesGetStudiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async studiesGetStudyRaw(requestParameters: StudiesGetStudyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StudyDetailsDto>> {
        if (requestParameters['studyId'] == null) {
            throw new runtime.RequiredError(
                'studyId',
                'Required parameter "studyId" was null or undefined when calling studiesGetStudy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/studies/{studyId}`.replace(`{${"studyId"}}`, encodeURIComponent(String(requestParameters['studyId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudyDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async studiesGetStudy(requestParameters: StudiesGetStudyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StudyDetailsDto> {
        const response = await this.studiesGetStudyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async studiesPublishStudyRaw(requestParameters: StudiesPublishStudyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['studyId'] == null) {
            throw new runtime.RequiredError(
                'studyId',
                'Required parameter "studyId" was null or undefined when calling studiesPublishStudy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/studies/{studyId}/publish`.replace(`{${"studyId"}}`, encodeURIComponent(String(requestParameters['studyId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async studiesPublishStudy(requestParameters: StudiesPublishStudyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.studiesPublishStudyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async studiesRemoveAdministratorRaw(requestParameters: StudiesRemoveAdministratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['studyId'] == null) {
            throw new runtime.RequiredError(
                'studyId',
                'Required parameter "studyId" was null or undefined when calling studiesRemoveAdministrator().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling studiesRemoveAdministrator().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/studies/{studyId}/administrators/{userId}`.replace(`{${"studyId"}}`, encodeURIComponent(String(requestParameters['studyId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async studiesRemoveAdministrator(requestParameters: StudiesRemoveAdministratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.studiesRemoveAdministratorRaw(requestParameters, initOverrides);
    }

    /**
     */
    async studiesRemoveParticipantRaw(requestParameters: StudiesRemoveParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['studyId'] == null) {
            throw new runtime.RequiredError(
                'studyId',
                'Required parameter "studyId" was null or undefined when calling studiesRemoveParticipant().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling studiesRemoveParticipant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/studies/{studyId}/participants/{userId}`.replace(`{${"studyId"}}`, encodeURIComponent(String(requestParameters['studyId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async studiesRemoveParticipant(requestParameters: StudiesRemoveParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.studiesRemoveParticipantRaw(requestParameters, initOverrides);
    }

    /**
     */
    async studiesUnpublishStudyRaw(requestParameters: StudiesUnpublishStudyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['studyId'] == null) {
            throw new runtime.RequiredError(
                'studyId',
                'Required parameter "studyId" was null or undefined when calling studiesUnpublishStudy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/studies/{studyId}/unpublish`.replace(`{${"studyId"}}`, encodeURIComponent(String(requestParameters['studyId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async studiesUnpublishStudy(requestParameters: StudiesUnpublishStudyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.studiesUnpublishStudyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async studiesUpdateAdministratorPermissionsRaw(requestParameters: StudiesUpdateAdministratorPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['studyId'] == null) {
            throw new runtime.RequiredError(
                'studyId',
                'Required parameter "studyId" was null or undefined when calling studiesUpdateAdministratorPermissions().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling studiesUpdateAdministratorPermissions().'
            );
        }

        if (requestParameters['permission'] == null) {
            throw new runtime.RequiredError(
                'permission',
                'Required parameter "permission" was null or undefined when calling studiesUpdateAdministratorPermissions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/studies/{studyId}/administrators/{userId}/permissions`.replace(`{${"studyId"}}`, encodeURIComponent(String(requestParameters['studyId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['permission']!.map(PermissionToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async studiesUpdateAdministratorPermissions(requestParameters: StudiesUpdateAdministratorPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.studiesUpdateAdministratorPermissionsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async studiesUpdateStudyRaw(requestParameters: StudiesUpdateStudyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StudyDetailsDto>> {
        if (requestParameters['studyId'] == null) {
            throw new runtime.RequiredError(
                'studyId',
                'Required parameter "studyId" was null or undefined when calling studiesUpdateStudy().'
            );
        }

        if (requestParameters['updateStudyCommand'] == null) {
            throw new runtime.RequiredError(
                'updateStudyCommand',
                'Required parameter "updateStudyCommand" was null or undefined when calling studiesUpdateStudy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/studies/{studyId}`.replace(`{${"studyId"}}`, encodeURIComponent(String(requestParameters['studyId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateStudyCommandToJSON(requestParameters['updateStudyCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudyDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async studiesUpdateStudy(requestParameters: StudiesUpdateStudyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StudyDetailsDto> {
        const response = await this.studiesUpdateStudyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
