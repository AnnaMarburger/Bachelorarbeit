/* tslint:disable */
/* eslint-disable */
/**
 * HSP Backend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import { MobilePhoneDtoFromJSONTyped } from './MobilePhoneDto';
/**
 * 
 * @export
 * @interface DeviceDto
 */
export interface DeviceDto {
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    identifier: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    $type: string;
}

/**
 * Check if a given object implements the DeviceDto interface.
 */
export function instanceOfDeviceDto(value: object): value is DeviceDto {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('identifier' in value) || value['identifier'] === undefined) return false;
    if (!('$type' in value) || value['$type'] === undefined) return false;
    return true;
}

export function DeviceDtoFromJSON(json: any): DeviceDto {
    return DeviceDtoFromJSONTyped(json, false);
}

export function DeviceDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): DeviceDto {
    if (json == null) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['$type'] === 'MobilePhoneDto') {
            return MobilePhoneDtoFromJSONTyped(json, true);
        }
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'identifier': json['identifier'],
        '$type': json['$type'],
    };
}

export function DeviceDtoToJSON(value?: DeviceDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'name': value['name'],
        'identifier': value['identifier'],
        '$type': value['$type'],
    };
}

