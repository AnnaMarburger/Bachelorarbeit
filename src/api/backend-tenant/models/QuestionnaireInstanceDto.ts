/* tslint:disable */
/* eslint-disable */
/**
 * HSP Backend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { QuestionnaireInstanceState } from './QuestionnaireInstanceState';
import {
    QuestionnaireInstanceStateFromJSON,
    QuestionnaireInstanceStateFromJSONTyped,
    QuestionnaireInstanceStateToJSON,
} from './QuestionnaireInstanceState';
import type { QuestionnaireInstanceDtoAllOfOwner } from './QuestionnaireInstanceDtoAllOfOwner';
import {
    QuestionnaireInstanceDtoAllOfOwnerFromJSON,
    QuestionnaireInstanceDtoAllOfOwnerFromJSONTyped,
    QuestionnaireInstanceDtoAllOfOwnerToJSON,
} from './QuestionnaireInstanceDtoAllOfOwner';

/**
 * 
 * @export
 * @interface QuestionnaireInstanceDto
 */
export interface QuestionnaireInstanceDto {
    /**
     * 
     * @type {string}
     * @memberof QuestionnaireInstanceDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionnaireInstanceDto
     */
    tenantId: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionnaireInstanceDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionnaireInstanceDto
     */
    questionnaireId: string;
    /**
     * 
     * @type {number}
     * @memberof QuestionnaireInstanceDto
     */
    questionnaireVersion: number;
    /**
     * 
     * @type {string}
     * @memberof QuestionnaireInstanceDto
     */
    questionnaireName: string;
    /**
     * 
     * @type {Date}
     * @memberof QuestionnaireInstanceDto
     */
    started?: Date;
    /**
     * 
     * @type {Date}
     * @memberof QuestionnaireInstanceDto
     */
    completed?: Date;
    /**
     * 
     * @type {Date}
     * @memberof QuestionnaireInstanceDto
     */
    hidden?: Date;
    /**
     * 
     * @type {QuestionnaireInstanceState}
     * @memberof QuestionnaireInstanceDto
     */
    state: QuestionnaireInstanceState;
    /**
     * 
     * @type {QuestionnaireInstanceDtoAllOfOwner}
     * @memberof QuestionnaireInstanceDto
     */
    owner?: QuestionnaireInstanceDtoAllOfOwner;
    /**
     * 
     * @type {number}
     * @memberof QuestionnaireInstanceDto
     */
    amountQuestions: number;
    /**
     * 
     * @type {number}
     * @memberof QuestionnaireInstanceDto
     */
    amountAnswers: number;
}

/**
 * Check if a given object implements the QuestionnaireInstanceDto interface.
 */
export function instanceOfQuestionnaireInstanceDto(value: object): value is QuestionnaireInstanceDto {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('tenantId' in value) || value['tenantId'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('questionnaireId' in value) || value['questionnaireId'] === undefined) return false;
    if (!('questionnaireVersion' in value) || value['questionnaireVersion'] === undefined) return false;
    if (!('questionnaireName' in value) || value['questionnaireName'] === undefined) return false;
    if (!('state' in value) || value['state'] === undefined) return false;
    if (!('amountQuestions' in value) || value['amountQuestions'] === undefined) return false;
    if (!('amountAnswers' in value) || value['amountAnswers'] === undefined) return false;
    return true;
}

export function QuestionnaireInstanceDtoFromJSON(json: any): QuestionnaireInstanceDto {
    return QuestionnaireInstanceDtoFromJSONTyped(json, false);
}

export function QuestionnaireInstanceDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestionnaireInstanceDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'tenantId': json['tenantId'],
        'name': json['name'],
        'questionnaireId': json['questionnaireId'],
        'questionnaireVersion': json['questionnaireVersion'],
        'questionnaireName': json['questionnaireName'],
        'started': json['started'] == null ? undefined : (new Date(json['started'])),
        'completed': json['completed'] == null ? undefined : (new Date(json['completed'])),
        'hidden': json['hidden'] == null ? undefined : (new Date(json['hidden'])),
        'state': QuestionnaireInstanceStateFromJSON(json['state']),
        'owner': json['owner'] == null ? undefined : QuestionnaireInstanceDtoAllOfOwnerFromJSON(json['owner']),
        'amountQuestions': json['amountQuestions'],
        'amountAnswers': json['amountAnswers'],
    };
}

export function QuestionnaireInstanceDtoToJSON(value?: QuestionnaireInstanceDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'tenantId': value['tenantId'],
        'name': value['name'],
        'questionnaireId': value['questionnaireId'],
        'questionnaireVersion': value['questionnaireVersion'],
        'questionnaireName': value['questionnaireName'],
        'started': value['started'] == null ? undefined : ((value['started'] as any).toISOString()),
        'completed': value['completed'] == null ? undefined : ((value['completed'] as any).toISOString()),
        'hidden': value['hidden'] == null ? undefined : ((value['hidden'] as any).toISOString()),
        'state': QuestionnaireInstanceStateToJSON(value['state']),
        'owner': QuestionnaireInstanceDtoAllOfOwnerToJSON(value['owner']),
        'amountQuestions': value['amountQuestions'],
        'amountAnswers': value['amountAnswers'],
    };
}

