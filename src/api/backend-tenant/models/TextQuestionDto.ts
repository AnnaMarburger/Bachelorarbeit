/* tslint:disable */
/* eslint-disable */
/**
 * HSP Backend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { QuestionDtoAllOfHint } from './QuestionDtoAllOfHint';
import {
    QuestionDtoAllOfHintFromJSON,
    QuestionDtoAllOfHintFromJSONTyped,
    QuestionDtoAllOfHintToJSON,
} from './QuestionDtoAllOfHint';
import type { ElementType } from './ElementType';
import {
    ElementTypeFromJSON,
    ElementTypeFromJSONTyped,
    ElementTypeToJSON,
} from './ElementType';
import type { TextQuestionDtoAllOfAnswer } from './TextQuestionDtoAllOfAnswer';
import {
    TextQuestionDtoAllOfAnswerFromJSON,
    TextQuestionDtoAllOfAnswerFromJSONTyped,
    TextQuestionDtoAllOfAnswerToJSON,
} from './TextQuestionDtoAllOfAnswer';
import type { TextQuestionValidation } from './TextQuestionValidation';
import {
    TextQuestionValidationFromJSON,
    TextQuestionValidationFromJSONTyped,
    TextQuestionValidationToJSON,
} from './TextQuestionValidation';
import type { ContentDtoCondition } from './ContentDtoCondition';
import {
    ContentDtoConditionFromJSON,
    ContentDtoConditionFromJSONTyped,
    ContentDtoConditionToJSON,
} from './ContentDtoCondition';
import type { InternationalizedString } from './InternationalizedString';
import {
    InternationalizedStringFromJSON,
    InternationalizedStringFromJSONTyped,
    InternationalizedStringToJSON,
} from './InternationalizedString';
import type { QuestionDto } from './QuestionDto';
import {
    QuestionDtoFromJSON,
    QuestionDtoFromJSONTyped,
    QuestionDtoToJSON,
} from './QuestionDto';

/**
 * 
 * @export
 * @interface TextQuestionDto
 */
export interface TextQuestionDto extends QuestionDto {
    /**
     * 
     * @type {TextQuestionValidation}
     * @memberof TextQuestionDto
     */
    validation: TextQuestionValidation;
    /**
     * 
     * @type {boolean}
     * @memberof TextQuestionDto
     */
    multiline: boolean;
    /**
     * 
     * @type {TextQuestionDtoAllOfAnswer}
     * @memberof TextQuestionDto
     */
    answer?: TextQuestionDtoAllOfAnswer;
}

/**
 * Check if a given object implements the TextQuestionDto interface.
 */
export function instanceOfTextQuestionDto(value: object): value is TextQuestionDto {
    if (!('validation' in value) || value['validation'] === undefined) return false;
    if (!('multiline' in value) || value['multiline'] === undefined) return false;
    return true;
}

export function TextQuestionDtoFromJSON(json: any): TextQuestionDto {
    return TextQuestionDtoFromJSONTyped(json, false);
}

export function TextQuestionDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): TextQuestionDto {
    if (json == null) {
        return json;
    }
    return {
        ...QuestionDtoFromJSONTyped(json, ignoreDiscriminator),
        'validation': TextQuestionValidationFromJSON(json['validation']),
        'multiline': json['multiline'],
        'answer': json['answer'] == null ? undefined : TextQuestionDtoAllOfAnswerFromJSON(json['answer']),
    };
}

export function TextQuestionDtoToJSON(value?: TextQuestionDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        ...QuestionDtoToJSON(value),
        'validation': TextQuestionValidationToJSON(value['validation']),
        'multiline': value['multiline'],
        'answer': TextQuestionDtoAllOfAnswerToJSON(value['answer']),
    };
}

