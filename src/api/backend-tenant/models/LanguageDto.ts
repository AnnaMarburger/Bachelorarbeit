/* tslint:disable */
/* eslint-disable */
/**
 * HSP Backend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LanguageDtoAllOfIcon } from './LanguageDtoAllOfIcon';
import {
    LanguageDtoAllOfIconFromJSON,
    LanguageDtoAllOfIconFromJSONTyped,
    LanguageDtoAllOfIconToJSON,
} from './LanguageDtoAllOfIcon';

/**
 * 
 * @export
 * @interface LanguageDto
 */
export interface LanguageDto {
    /**
     * 
     * @type {string}
     * @memberof LanguageDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof LanguageDto
     */
    tenantId: string;
    /**
     * 
     * @type {string}
     * @memberof LanguageDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof LanguageDto
     */
    code: string;
    /**
     * 
     * @type {LanguageDtoAllOfIcon}
     * @memberof LanguageDto
     */
    icon?: LanguageDtoAllOfIcon;
    /**
     * 
     * @type {Array<LanguageDto>}
     * @memberof LanguageDto
     */
    fallbackLanguages: Array<LanguageDto>;
}

/**
 * Check if a given object implements the LanguageDto interface.
 */
export function instanceOfLanguageDto(value: object): value is LanguageDto {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('tenantId' in value) || value['tenantId'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('code' in value) || value['code'] === undefined) return false;
    if (!('fallbackLanguages' in value) || value['fallbackLanguages'] === undefined) return false;
    return true;
}

export function LanguageDtoFromJSON(json: any): LanguageDto {
    return LanguageDtoFromJSONTyped(json, false);
}

export function LanguageDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): LanguageDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'tenantId': json['tenantId'],
        'name': json['name'],
        'code': json['code'],
        'icon': json['icon'] == null ? undefined : LanguageDtoAllOfIconFromJSON(json['icon']),
        'fallbackLanguages': ((json['fallbackLanguages'] as Array<any>).map(LanguageDtoFromJSON)),
    };
}

export function LanguageDtoToJSON(value?: LanguageDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'tenantId': value['tenantId'],
        'name': value['name'],
        'code': value['code'],
        'icon': LanguageDtoAllOfIconToJSON(value['icon']),
        'fallbackLanguages': ((value['fallbackLanguages'] as Array<any>).map(LanguageDtoToJSON)),
    };
}

