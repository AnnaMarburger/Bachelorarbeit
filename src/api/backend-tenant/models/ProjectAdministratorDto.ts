/* tslint:disable */
/* eslint-disable */
/**
 * HSP Backend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserDto } from './UserDto';
import {
    UserDtoFromJSON,
    UserDtoFromJSONTyped,
    UserDtoToJSON,
} from './UserDto';
import type { Permission } from './Permission';
import {
    PermissionFromJSON,
    PermissionFromJSONTyped,
    PermissionToJSON,
} from './Permission';

/**
 * 
 * @export
 * @interface ProjectAdministratorDto
 */
export interface ProjectAdministratorDto {
    /**
     * 
     * @type {UserDto}
     * @memberof ProjectAdministratorDto
     */
    user: UserDto;
    /**
     * 
     * @type {string}
     * @memberof ProjectAdministratorDto
     */
    projectId: string;
    /**
     * 
     * @type {Array<Permission>}
     * @memberof ProjectAdministratorDto
     */
    permissions: Array<Permission>;
}

/**
 * Check if a given object implements the ProjectAdministratorDto interface.
 */
export function instanceOfProjectAdministratorDto(value: object): value is ProjectAdministratorDto {
    if (!('user' in value) || value['user'] === undefined) return false;
    if (!('projectId' in value) || value['projectId'] === undefined) return false;
    if (!('permissions' in value) || value['permissions'] === undefined) return false;
    return true;
}

export function ProjectAdministratorDtoFromJSON(json: any): ProjectAdministratorDto {
    return ProjectAdministratorDtoFromJSONTyped(json, false);
}

export function ProjectAdministratorDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectAdministratorDto {
    if (json == null) {
        return json;
    }
    return {
        
        'user': UserDtoFromJSON(json['user']),
        'projectId': json['projectId'],
        'permissions': ((json['permissions'] as Array<any>).map(PermissionFromJSON)),
    };
}

export function ProjectAdministratorDtoToJSON(value?: ProjectAdministratorDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'user': UserDtoToJSON(value['user']),
        'projectId': value['projectId'],
        'permissions': ((value['permissions'] as Array<any>).map(PermissionToJSON)),
    };
}

