/* tslint:disable */
/* eslint-disable */
/**
 * HSP Backend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AppPageDetailsDtoCondition } from './AppPageDetailsDtoCondition';
import {
    AppPageDetailsDtoConditionFromJSON,
    AppPageDetailsDtoConditionFromJSONTyped,
    AppPageDetailsDtoConditionToJSON,
} from './AppPageDetailsDtoCondition';
import type { ContentPageDto } from './ContentPageDto';
import {
    ContentPageDtoFromJSON,
    ContentPageDtoFromJSONTyped,
    ContentPageDtoToJSON,
} from './ContentPageDto';
import type { InternationalizedString } from './InternationalizedString';
import {
    InternationalizedStringFromJSON,
    InternationalizedStringFromJSONTyped,
    InternationalizedStringToJSON,
} from './InternationalizedString';
import type { InternationalizedDocument } from './InternationalizedDocument';
import {
    InternationalizedDocumentFromJSON,
    InternationalizedDocumentFromJSONTyped,
    InternationalizedDocumentToJSON,
} from './InternationalizedDocument';
import type { QuestionnaireInstantiationMode } from './QuestionnaireInstantiationMode';
import {
    QuestionnaireInstantiationModeFromJSON,
    QuestionnaireInstantiationModeFromJSONTyped,
    QuestionnaireInstantiationModeToJSON,
} from './QuestionnaireInstantiationMode';

/**
 * 
 * @export
 * @interface UpdateQuestionnaireCommand
 */
export interface UpdateQuestionnaireCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdateQuestionnaireCommand
     */
    containerId: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateQuestionnaireCommand
     */
    name: string;
    /**
     * 
     * @type {InternationalizedString}
     * @memberof UpdateQuestionnaireCommand
     */
    title: InternationalizedString;
    /**
     * 
     * @type {InternationalizedDocument}
     * @memberof UpdateQuestionnaireCommand
     */
    description: InternationalizedDocument;
    /**
     * 
     * @type {string}
     * @memberof UpdateQuestionnaireCommand
     */
    defaultLanguageId: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateQuestionnaireCommand
     */
    languageIds: Array<string>;
    /**
     * 
     * @type {Array<ContentPageDto>}
     * @memberof UpdateQuestionnaireCommand
     */
    pages: Array<ContentPageDto>;
    /**
     * 
     * @type {QuestionnaireInstantiationMode}
     * @memberof UpdateQuestionnaireCommand
     */
    instantiationMode: QuestionnaireInstantiationMode;
    /**
     * 
     * @type {AppPageDetailsDtoCondition}
     * @memberof UpdateQuestionnaireCommand
     */
    condition?: AppPageDetailsDtoCondition;
}

/**
 * Check if a given object implements the UpdateQuestionnaireCommand interface.
 */
export function instanceOfUpdateQuestionnaireCommand(value: object): value is UpdateQuestionnaireCommand {
    if (!('containerId' in value) || value['containerId'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('defaultLanguageId' in value) || value['defaultLanguageId'] === undefined) return false;
    if (!('languageIds' in value) || value['languageIds'] === undefined) return false;
    if (!('pages' in value) || value['pages'] === undefined) return false;
    if (!('instantiationMode' in value) || value['instantiationMode'] === undefined) return false;
    return true;
}

export function UpdateQuestionnaireCommandFromJSON(json: any): UpdateQuestionnaireCommand {
    return UpdateQuestionnaireCommandFromJSONTyped(json, false);
}

export function UpdateQuestionnaireCommandFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateQuestionnaireCommand {
    if (json == null) {
        return json;
    }
    return {
        
        'containerId': json['containerId'],
        'name': json['name'],
        'title': InternationalizedStringFromJSON(json['title']),
        'description': InternationalizedDocumentFromJSON(json['description']),
        'defaultLanguageId': json['defaultLanguageId'],
        'languageIds': json['languageIds'],
        'pages': ((json['pages'] as Array<any>).map(ContentPageDtoFromJSON)),
        'instantiationMode': QuestionnaireInstantiationModeFromJSON(json['instantiationMode']),
        'condition': json['condition'] == null ? undefined : AppPageDetailsDtoConditionFromJSON(json['condition']),
    };
}

export function UpdateQuestionnaireCommandToJSON(value?: UpdateQuestionnaireCommand | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'containerId': value['containerId'],
        'name': value['name'],
        'title': InternationalizedStringToJSON(value['title']),
        'description': InternationalizedDocumentToJSON(value['description']),
        'defaultLanguageId': value['defaultLanguageId'],
        'languageIds': value['languageIds'],
        'pages': ((value['pages'] as Array<any>).map(ContentPageDtoToJSON)),
        'instantiationMode': QuestionnaireInstantiationModeToJSON(value['instantiationMode']),
        'condition': AppPageDetailsDtoConditionToJSON(value['condition']),
    };
}

