/* tslint:disable */
/* eslint-disable */
/**
 * HSP Backend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { QuestionDtoAllOfHint } from './QuestionDtoAllOfHint';
import {
    QuestionDtoAllOfHintFromJSON,
    QuestionDtoAllOfHintFromJSONTyped,
    QuestionDtoAllOfHintToJSON,
} from './QuestionDtoAllOfHint';
import type { ElementType } from './ElementType';
import {
    ElementTypeFromJSON,
    ElementTypeFromJSONTyped,
    ElementTypeToJSON,
} from './ElementType';
import type { LikertQuestionValidation } from './LikertQuestionValidation';
import {
    LikertQuestionValidationFromJSON,
    LikertQuestionValidationFromJSONTyped,
    LikertQuestionValidationToJSON,
} from './LikertQuestionValidation';
import type { LikertScaleItem } from './LikertScaleItem';
import {
    LikertScaleItemFromJSON,
    LikertScaleItemFromJSONTyped,
    LikertScaleItemToJSON,
} from './LikertScaleItem';
import type { ContentDtoCondition } from './ContentDtoCondition';
import {
    ContentDtoConditionFromJSON,
    ContentDtoConditionFromJSONTyped,
    ContentDtoConditionToJSON,
} from './ContentDtoCondition';
import type { InternationalizedString } from './InternationalizedString';
import {
    InternationalizedStringFromJSON,
    InternationalizedStringFromJSONTyped,
    InternationalizedStringToJSON,
} from './InternationalizedString';
import type { QuestionDto } from './QuestionDto';
import {
    QuestionDtoFromJSON,
    QuestionDtoFromJSONTyped,
    QuestionDtoToJSON,
} from './QuestionDto';
import type { LikertQuestionDtoAllOfAnswer } from './LikertQuestionDtoAllOfAnswer';
import {
    LikertQuestionDtoAllOfAnswerFromJSON,
    LikertQuestionDtoAllOfAnswerFromJSONTyped,
    LikertQuestionDtoAllOfAnswerToJSON,
} from './LikertQuestionDtoAllOfAnswer';

/**
 * 
 * @export
 * @interface LikertQuestionDto
 */
export interface LikertQuestionDto extends QuestionDto {
    /**
     * 
     * @type {LikertQuestionValidation}
     * @memberof LikertQuestionDto
     */
    validation: LikertQuestionValidation;
    /**
     * 
     * @type {Array<LikertScaleItem>}
     * @memberof LikertQuestionDto
     */
    scale: Array<LikertScaleItem>;
    /**
     * 
     * @type {LikertQuestionDtoAllOfAnswer}
     * @memberof LikertQuestionDto
     */
    answer?: LikertQuestionDtoAllOfAnswer;
}

/**
 * Check if a given object implements the LikertQuestionDto interface.
 */
export function instanceOfLikertQuestionDto(value: object): value is LikertQuestionDto {
    if (!('validation' in value) || value['validation'] === undefined) return false;
    if (!('scale' in value) || value['scale'] === undefined) return false;
    return true;
}

export function LikertQuestionDtoFromJSON(json: any): LikertQuestionDto {
    return LikertQuestionDtoFromJSONTyped(json, false);
}

export function LikertQuestionDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): LikertQuestionDto {
    if (json == null) {
        return json;
    }
    return {
        ...QuestionDtoFromJSONTyped(json, ignoreDiscriminator),
        'validation': LikertQuestionValidationFromJSON(json['validation']),
        'scale': ((json['scale'] as Array<any>).map(LikertScaleItemFromJSON)),
        'answer': json['answer'] == null ? undefined : LikertQuestionDtoAllOfAnswerFromJSON(json['answer']),
    };
}

export function LikertQuestionDtoToJSON(value?: LikertQuestionDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        ...QuestionDtoToJSON(value),
        'validation': LikertQuestionValidationToJSON(value['validation']),
        'scale': ((value['scale'] as Array<any>).map(LikertScaleItemToJSON)),
        'answer': LikertQuestionDtoAllOfAnswerToJSON(value['answer']),
    };
}

