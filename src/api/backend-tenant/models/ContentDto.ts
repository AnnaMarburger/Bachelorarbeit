/* tslint:disable */
/* eslint-disable */
/**
 * HSP Backend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ElementType } from './ElementType';
import {
    ElementTypeFromJSON,
    ElementTypeFromJSONTyped,
    ElementTypeToJSON,
} from './ElementType';
import type { ContentDtoCondition } from './ContentDtoCondition';
import {
    ContentDtoConditionFromJSON,
    ContentDtoConditionFromJSONTyped,
    ContentDtoConditionToJSON,
} from './ContentDtoCondition';

import { ChoicePropertyDtoFromJSONTyped } from './ChoicePropertyDto';
import { ChoiceQuestionDtoFromJSONTyped } from './ChoiceQuestionDto';
import { ContentGroupDtoFromJSONTyped } from './ContentGroupDto';
import { ContentPageDtoFromJSONTyped } from './ContentPageDto';
import { DatePropertyDtoFromJSONTyped } from './DatePropertyDto';
import { DateQuestionDtoFromJSONTyped } from './DateQuestionDto';
import { DateTimeQuestionDtoFromJSONTyped } from './DateTimeQuestionDto';
import { DisplayDtoFromJSONTyped } from './DisplayDto';
import { ImageDisplayDtoFromJSONTyped } from './ImageDisplayDto';
import { LikertQuestionDtoFromJSONTyped } from './LikertQuestionDto';
import { MatrixQuestionDtoFromJSONTyped } from './MatrixQuestionDto';
import { NumberPropertyDtoFromJSONTyped } from './NumberPropertyDto';
import { NumberQuestionDtoFromJSONTyped } from './NumberQuestionDto';
import { PropertyDtoFromJSONTyped } from './PropertyDto';
import { QuestionDtoFromJSONTyped } from './QuestionDto';
import { RichTextDisplayDtoFromJSONTyped } from './RichTextDisplayDto';
import { SliderQuestionDtoFromJSONTyped } from './SliderQuestionDto';
import { TextDisplayDtoFromJSONTyped } from './TextDisplayDto';
import { TextPropertyDtoFromJSONTyped } from './TextPropertyDto';
import { TextQuestionDtoFromJSONTyped } from './TextQuestionDto';
import { TimeQuestionDtoFromJSONTyped } from './TimeQuestionDto';
/**
 * 
 * @export
 * @interface ContentDto
 */
export interface ContentDto {
    /**
     * 
     * @type {string}
     * @memberof ContentDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ContentDto
     */
    name: string;
    /**
     * 
     * @type {ElementType}
     * @memberof ContentDto
     */
    elementType: ElementType;
    /**
     * 
     * @type {ContentDtoCondition}
     * @memberof ContentDto
     */
    condition?: ContentDtoCondition;
    /**
     * 
     * @type {string}
     * @memberof ContentDto
     */
    $type: string;
}

/**
 * Check if a given object implements the ContentDto interface.
 */
export function instanceOfContentDto(value: object): value is ContentDto {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('elementType' in value) || value['elementType'] === undefined) return false;
    if (!('$type' in value) || value['$type'] === undefined) return false;
    return true;
}

export function ContentDtoFromJSON(json: any): ContentDto {
    return ContentDtoFromJSONTyped(json, false);
}

export function ContentDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContentDto {
    if (json == null) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['$type'] === 'ChoicePropertyDto') {
            return ChoicePropertyDtoFromJSONTyped(json, true);
        }
        if (json['$type'] === 'ChoiceQuestionDto') {
            return ChoiceQuestionDtoFromJSONTyped(json, true);
        }
        if (json['$type'] === 'ContentGroupDto') {
            return ContentGroupDtoFromJSONTyped(json, true);
        }
        if (json['$type'] === 'ContentPageDto') {
            return ContentPageDtoFromJSONTyped(json, true);
        }
        if (json['$type'] === 'DatePropertyDto') {
            return DatePropertyDtoFromJSONTyped(json, true);
        }
        if (json['$type'] === 'DateQuestionDto') {
            return DateQuestionDtoFromJSONTyped(json, true);
        }
        if (json['$type'] === 'DateTimeQuestionDto') {
            return DateTimeQuestionDtoFromJSONTyped(json, true);
        }
        if (json['$type'] === 'DisplayDto') {
            return DisplayDtoFromJSONTyped(json, true);
        }
        if (json['$type'] === 'ImageDisplayDto') {
            return ImageDisplayDtoFromJSONTyped(json, true);
        }
        if (json['$type'] === 'LikertQuestionDto') {
            return LikertQuestionDtoFromJSONTyped(json, true);
        }
        if (json['$type'] === 'MatrixQuestionDto') {
            return MatrixQuestionDtoFromJSONTyped(json, true);
        }
        if (json['$type'] === 'NumberPropertyDto') {
            return NumberPropertyDtoFromJSONTyped(json, true);
        }
        if (json['$type'] === 'NumberQuestionDto') {
            return NumberQuestionDtoFromJSONTyped(json, true);
        }
        if (json['$type'] === 'PropertyDto') {
            return PropertyDtoFromJSONTyped(json, true);
        }
        if (json['$type'] === 'QuestionDto') {
            return QuestionDtoFromJSONTyped(json, true);
        }
        if (json['$type'] === 'RichTextDisplayDto') {
            return RichTextDisplayDtoFromJSONTyped(json, true);
        }
        if (json['$type'] === 'SliderQuestionDto') {
            return SliderQuestionDtoFromJSONTyped(json, true);
        }
        if (json['$type'] === 'TextDisplayDto') {
            return TextDisplayDtoFromJSONTyped(json, true);
        }
        if (json['$type'] === 'TextPropertyDto') {
            return TextPropertyDtoFromJSONTyped(json, true);
        }
        if (json['$type'] === 'TextQuestionDto') {
            return TextQuestionDtoFromJSONTyped(json, true);
        }
        if (json['$type'] === 'TimeQuestionDto') {
            return TimeQuestionDtoFromJSONTyped(json, true);
        }
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'elementType': ElementTypeFromJSON(json['elementType']),
        'condition': json['condition'] == null ? undefined : ContentDtoConditionFromJSON(json['condition']),
        '$type': json['$type'],
    };
}

export function ContentDtoToJSON(value?: ContentDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'name': value['name'],
        'elementType': ElementTypeToJSON(value['elementType']),
        'condition': ContentDtoConditionToJSON(value['condition']),
        '$type': value['$type'],
    };
}

