/* tslint:disable */
/* eslint-disable */
/**
 * HSP Backend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ContentDto } from './ContentDto';
import {
    ContentDtoFromJSON,
    ContentDtoFromJSONTyped,
    ContentDtoToJSON,
} from './ContentDto';
import type { ElementType } from './ElementType';
import {
    ElementTypeFromJSON,
    ElementTypeFromJSONTyped,
    ElementTypeToJSON,
} from './ElementType';
import type { ContentDtoCondition } from './ContentDtoCondition';
import {
    ContentDtoConditionFromJSON,
    ContentDtoConditionFromJSONTyped,
    ContentDtoConditionToJSON,
} from './ContentDtoCondition';
import type { InternationalizedString } from './InternationalizedString';
import {
    InternationalizedStringFromJSON,
    InternationalizedStringFromJSONTyped,
    InternationalizedStringToJSON,
} from './InternationalizedString';

/**
 * 
 * @export
 * @interface PropertyDto
 */
export interface PropertyDto extends ContentDto {
    /**
     * 
     * @type {InternationalizedString}
     * @memberof PropertyDto
     */
    text: InternationalizedString;
}

/**
 * Check if a given object implements the PropertyDto interface.
 */
export function instanceOfPropertyDto(value: object): value is PropertyDto {
    if (!('text' in value) || value['text'] === undefined) return false;
    return true;
}

export function PropertyDtoFromJSON(json: any): PropertyDto {
    return PropertyDtoFromJSONTyped(json, false);
}

export function PropertyDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): PropertyDto {
    if (json == null) {
        return json;
    }
    return {
        ...ContentDtoFromJSONTyped(json, ignoreDiscriminator),
        'text': InternationalizedStringFromJSON(json['text']),
    };
}

export function PropertyDtoToJSON(value?: PropertyDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        ...ContentDtoToJSON(value),
        'text': InternationalizedStringToJSON(value['text']),
    };
}

