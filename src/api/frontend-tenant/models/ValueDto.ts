/* tslint:disable */
/* eslint-disable */
/**
 * HSP Frontend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import { ChoiceValueDtoFromJSONTyped } from './ChoiceValueDto';
import { DateValueDtoFromJSONTyped } from './DateValueDto';
import { NumberValueDtoFromJSONTyped } from './NumberValueDto';
import { TextValueDtoFromJSONTyped } from './TextValueDto';
/**
 * 
 * @export
 * @interface ValueDto
 */
export interface ValueDto {
    /**
     * 
     * @type {string}
     * @memberof ValueDto
     */
    propertyId: string;
    /**
     * 
     * @type {string}
     * @memberof ValueDto
     */
    $type: string;
}

/**
 * Check if a given object implements the ValueDto interface.
 */
export function instanceOfValueDto(value: object): value is ValueDto {
    if (!('propertyId' in value) || value['propertyId'] === undefined) return false;
    if (!('$type' in value) || value['$type'] === undefined) return false;
    return true;
}

export function ValueDtoFromJSON(json: any): ValueDto {
    return ValueDtoFromJSONTyped(json, false);
}

export function ValueDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ValueDto {
    if (json == null) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['$type'] === 'ChoiceValueDto') {
            return ChoiceValueDtoFromJSONTyped(json, true);
        }
        if (json['$type'] === 'DateValueDto') {
            return DateValueDtoFromJSONTyped(json, true);
        }
        if (json['$type'] === 'NumberValueDto') {
            return NumberValueDtoFromJSONTyped(json, true);
        }
        if (json['$type'] === 'TextValueDto') {
            return TextValueDtoFromJSONTyped(json, true);
        }
    }
    return {
        
        'propertyId': json['propertyId'],
        '$type': json['$type'],
    };
}

export function ValueDtoToJSON(value?: ValueDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'propertyId': value['propertyId'],
        '$type': value['$type'],
    };
}

