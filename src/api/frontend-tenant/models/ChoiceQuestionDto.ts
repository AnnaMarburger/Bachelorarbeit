/* tslint:disable */
/* eslint-disable */
/**
 * HSP Frontend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { QuestionDtoAllOfHint } from './QuestionDtoAllOfHint';
import {
    QuestionDtoAllOfHintFromJSON,
    QuestionDtoAllOfHintFromJSONTyped,
    QuestionDtoAllOfHintToJSON,
} from './QuestionDtoAllOfHint';
import type { SelectionItem } from './SelectionItem';
import {
    SelectionItemFromJSON,
    SelectionItemFromJSONTyped,
    SelectionItemToJSON,
} from './SelectionItem';
import type { ElementType } from './ElementType';
import {
    ElementTypeFromJSON,
    ElementTypeFromJSONTyped,
    ElementTypeToJSON,
} from './ElementType';
import type { ContentDtoCondition } from './ContentDtoCondition';
import {
    ContentDtoConditionFromJSON,
    ContentDtoConditionFromJSONTyped,
    ContentDtoConditionToJSON,
} from './ContentDtoCondition';
import type { InternationalizedString } from './InternationalizedString';
import {
    InternationalizedStringFromJSON,
    InternationalizedStringFromJSONTyped,
    InternationalizedStringToJSON,
} from './InternationalizedString';
import type { QuestionDto } from './QuestionDto';
import {
    QuestionDtoFromJSON,
    QuestionDtoFromJSONTyped,
    QuestionDtoToJSON,
} from './QuestionDto';
import type { ChoiceQuestionDtoAllOfAnswer } from './ChoiceQuestionDtoAllOfAnswer';
import {
    ChoiceQuestionDtoAllOfAnswerFromJSON,
    ChoiceQuestionDtoAllOfAnswerFromJSONTyped,
    ChoiceQuestionDtoAllOfAnswerToJSON,
} from './ChoiceQuestionDtoAllOfAnswer';
import type { ChoiceQuestionValidation } from './ChoiceQuestionValidation';
import {
    ChoiceQuestionValidationFromJSON,
    ChoiceQuestionValidationFromJSONTyped,
    ChoiceQuestionValidationToJSON,
} from './ChoiceQuestionValidation';

/**
 * 
 * @export
 * @interface ChoiceQuestionDto
 */
export interface ChoiceQuestionDto extends QuestionDto {
    /**
     * 
     * @type {ChoiceQuestionValidation}
     * @memberof ChoiceQuestionDto
     */
    validation: ChoiceQuestionValidation;
    /**
     * 
     * @type {boolean}
     * @memberof ChoiceQuestionDto
     */
    multiSelection: boolean;
    /**
     * 
     * @type {Array<SelectionItem>}
     * @memberof ChoiceQuestionDto
     */
    choices: Array<SelectionItem>;
    /**
     * 
     * @type {ChoiceQuestionDtoAllOfAnswer}
     * @memberof ChoiceQuestionDto
     */
    answer?: ChoiceQuestionDtoAllOfAnswer;
}

/**
 * Check if a given object implements the ChoiceQuestionDto interface.
 */
export function instanceOfChoiceQuestionDto(value: object): value is ChoiceQuestionDto {
    if (!('validation' in value) || value['validation'] === undefined) return false;
    if (!('multiSelection' in value) || value['multiSelection'] === undefined) return false;
    if (!('choices' in value) || value['choices'] === undefined) return false;
    return true;
}

export function ChoiceQuestionDtoFromJSON(json: any): ChoiceQuestionDto {
    return ChoiceQuestionDtoFromJSONTyped(json, false);
}

export function ChoiceQuestionDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChoiceQuestionDto {
    if (json == null) {
        return json;
    }
    return {
        ...QuestionDtoFromJSONTyped(json, ignoreDiscriminator),
        'validation': ChoiceQuestionValidationFromJSON(json['validation']),
        'multiSelection': json['multiSelection'],
        'choices': ((json['choices'] as Array<any>).map(SelectionItemFromJSON)),
        'answer': json['answer'] == null ? undefined : ChoiceQuestionDtoAllOfAnswerFromJSON(json['answer']),
    };
}

export function ChoiceQuestionDtoToJSON(value?: ChoiceQuestionDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        ...QuestionDtoToJSON(value),
        'validation': ChoiceQuestionValidationToJSON(value['validation']),
        'multiSelection': value['multiSelection'],
        'choices': ((value['choices'] as Array<any>).map(SelectionItemToJSON)),
        'answer': ChoiceQuestionDtoAllOfAnswerToJSON(value['answer']),
    };
}

