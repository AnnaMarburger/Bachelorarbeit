/* tslint:disable */
/* eslint-disable */
/**
 * HSP Frontend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ContentDto } from './ContentDto';
import {
    ContentDtoFromJSON,
    ContentDtoFromJSONTyped,
    ContentDtoToJSON,
} from './ContentDto';
import type { LanguageDto } from './LanguageDto';
import {
    LanguageDtoFromJSON,
    LanguageDtoFromJSONTyped,
    LanguageDtoToJSON,
} from './LanguageDto';
import type { InternationalizedString } from './InternationalizedString';
import {
    InternationalizedStringFromJSON,
    InternationalizedStringFromJSONTyped,
    InternationalizedStringToJSON,
} from './InternationalizedString';
import type { ContainerDtoAllOfCondition } from './ContainerDtoAllOfCondition';
import {
    ContainerDtoAllOfConditionFromJSON,
    ContainerDtoAllOfConditionFromJSONTyped,
    ContainerDtoAllOfConditionToJSON,
} from './ContainerDtoAllOfCondition';
import type { InternationalizedDocument } from './InternationalizedDocument';
import {
    InternationalizedDocumentFromJSON,
    InternationalizedDocumentFromJSONTyped,
    InternationalizedDocumentToJSON,
} from './InternationalizedDocument';

/**
 * 
 * @export
 * @interface AppPageDto
 */
export interface AppPageDto {
    /**
     * 
     * @type {string}
     * @memberof AppPageDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof AppPageDto
     */
    tenantId: string;
    /**
     * 
     * @type {string}
     * @memberof AppPageDto
     */
    name: string;
    /**
     * 
     * @type {InternationalizedString}
     * @memberof AppPageDto
     */
    title: InternationalizedString;
    /**
     * 
     * @type {ContainerDtoAllOfCondition}
     * @memberof AppPageDto
     */
    condition?: ContainerDtoAllOfCondition;
    /**
     * 
     * @type {Array<LanguageDto>}
     * @memberof AppPageDto
     */
    languages: Array<LanguageDto>;
    /**
     * 
     * @type {InternationalizedDocument}
     * @memberof AppPageDto
     */
    description: InternationalizedDocument;
    /**
     * 
     * @type {Date}
     * @memberof AppPageDto
     */
    lastModified: Date;
    /**
     * 
     * @type {Date}
     * @memberof AppPageDto
     */
    published?: Date;
    /**
     * 
     * @type {Array<ContentDto>}
     * @memberof AppPageDto
     */
    contents: Array<ContentDto>;
    /**
     * 
     * @type {string}
     * @memberof AppPageDto
     */
    hierarchy: string;
    /**
     * 
     * @type {number}
     * @memberof AppPageDto
     */
    level: number;
    /**
     * 
     * @type {Array<AppPageDto>}
     * @memberof AppPageDto
     */
    children: Array<AppPageDto>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AppPageDto
     */
    tags: Array<string>;
}

/**
 * Check if a given object implements the AppPageDto interface.
 */
export function instanceOfAppPageDto(value: object): value is AppPageDto {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('tenantId' in value) || value['tenantId'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('languages' in value) || value['languages'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('lastModified' in value) || value['lastModified'] === undefined) return false;
    if (!('contents' in value) || value['contents'] === undefined) return false;
    if (!('hierarchy' in value) || value['hierarchy'] === undefined) return false;
    if (!('level' in value) || value['level'] === undefined) return false;
    if (!('children' in value) || value['children'] === undefined) return false;
    if (!('tags' in value) || value['tags'] === undefined) return false;
    return true;
}

export function AppPageDtoFromJSON(json: any): AppPageDto {
    return AppPageDtoFromJSONTyped(json, false);
}

export function AppPageDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AppPageDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'tenantId': json['tenantId'],
        'name': json['name'],
        'title': InternationalizedStringFromJSON(json['title']),
        'condition': json['condition'] == null ? undefined : ContainerDtoAllOfConditionFromJSON(json['condition']),
        'languages': ((json['languages'] as Array<any>).map(LanguageDtoFromJSON)),
        'description': InternationalizedDocumentFromJSON(json['description']),
        'lastModified': (new Date(json['lastModified'])),
        'published': json['published'] == null ? undefined : (new Date(json['published'])),
        'contents': ((json['contents'] as Array<any>).map(ContentDtoFromJSON)),
        'hierarchy': json['hierarchy'],
        'level': json['level'],
        'children': ((json['children'] as Array<any>).map(AppPageDtoFromJSON)),
        'tags': json['tags'],
    };
}

export function AppPageDtoToJSON(value?: AppPageDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'tenantId': value['tenantId'],
        'name': value['name'],
        'title': InternationalizedStringToJSON(value['title']),
        'condition': ContainerDtoAllOfConditionToJSON(value['condition']),
        'languages': ((value['languages'] as Array<any>).map(LanguageDtoToJSON)),
        'description': InternationalizedDocumentToJSON(value['description']),
        'lastModified': ((value['lastModified']).toISOString()),
        'published': value['published'] == null ? undefined : ((value['published'] as any).toISOString()),
        'contents': ((value['contents'] as Array<any>).map(ContentDtoToJSON)),
        'hierarchy': value['hierarchy'],
        'level': value['level'],
        'children': ((value['children'] as Array<any>).map(AppPageDtoToJSON)),
        'tags': value['tags'],
    };
}

