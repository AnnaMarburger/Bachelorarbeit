/* tslint:disable */
/* eslint-disable */
/**
 * HSP Frontend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { NodeType } from './NodeType';
import {
    NodeTypeFromJSON,
    NodeTypeFromJSONTyped,
    NodeTypeToJSON,
} from './NodeType';
import type { Mark } from './Mark';
import {
    MarkFromJSON,
    MarkFromJSONTyped,
    MarkToJSON,
} from './Mark';
import type { NodeAttrs } from './NodeAttrs';
import {
    NodeAttrsFromJSON,
    NodeAttrsFromJSONTyped,
    NodeAttrsToJSON,
} from './NodeAttrs';

/**
 * 
 * @export
 * @interface Node
 */
export interface Node {
    /**
     * 
     * @type {NodeType}
     * @memberof Node
     */
    type: NodeType;
    /**
     * 
     * @type {NodeAttrs}
     * @memberof Node
     */
    attrs?: NodeAttrs;
    /**
     * 
     * @type {Array<Node>}
     * @memberof Node
     */
    content?: Array<Node>;
    /**
     * 
     * @type {Array<Mark>}
     * @memberof Node
     */
    marks?: Array<Mark>;
    /**
     * 
     * @type {string}
     * @memberof Node
     */
    text?: string;
}

/**
 * Check if a given object implements the Node interface.
 */
export function instanceOfNode(value: object): value is Node {
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function NodeFromJSON(json: any): Node {
    return NodeFromJSONTyped(json, false);
}

export function NodeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Node {
    if (json == null) {
        return json;
    }
    return {
        
        'type': NodeTypeFromJSON(json['type']),
        'attrs': json['attrs'] == null ? undefined : NodeAttrsFromJSON(json['attrs']),
        'content': json['content'] == null ? undefined : ((json['content'] as Array<any>).map(NodeFromJSON)),
        'marks': json['marks'] == null ? undefined : ((json['marks'] as Array<any>).map(MarkFromJSON)),
        'text': json['text'] == null ? undefined : json['text'],
    };
}

export function NodeToJSON(value?: Node | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'type': NodeTypeToJSON(value['type']),
        'attrs': NodeAttrsToJSON(value['attrs']),
        'content': value['content'] == null ? undefined : ((value['content'] as Array<any>).map(NodeToJSON)),
        'marks': value['marks'] == null ? undefined : ((value['marks'] as Array<any>).map(MarkToJSON)),
        'text': value['text'],
    };
}

