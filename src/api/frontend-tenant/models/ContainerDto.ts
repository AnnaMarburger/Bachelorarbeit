/* tslint:disable */
/* eslint-disable */
/**
 * HSP Frontend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LanguageDto } from './LanguageDto';
import {
    LanguageDtoFromJSON,
    LanguageDtoFromJSONTyped,
    LanguageDtoToJSON,
} from './LanguageDto';
import type { InternationalizedString } from './InternationalizedString';
import {
    InternationalizedStringFromJSON,
    InternationalizedStringFromJSONTyped,
    InternationalizedStringToJSON,
} from './InternationalizedString';
import type { ContainerDtoAllOfCondition } from './ContainerDtoAllOfCondition';
import {
    ContainerDtoAllOfConditionFromJSON,
    ContainerDtoAllOfConditionFromJSONTyped,
    ContainerDtoAllOfConditionToJSON,
} from './ContainerDtoAllOfCondition';

/**
 * 
 * @export
 * @interface ContainerDto
 */
export interface ContainerDto {
    /**
     * 
     * @type {string}
     * @memberof ContainerDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ContainerDto
     */
    tenantId: string;
    /**
     * 
     * @type {string}
     * @memberof ContainerDto
     */
    name: string;
    /**
     * 
     * @type {InternationalizedString}
     * @memberof ContainerDto
     */
    title: InternationalizedString;
    /**
     * 
     * @type {ContainerDtoAllOfCondition}
     * @memberof ContainerDto
     */
    condition?: ContainerDtoAllOfCondition;
    /**
     * 
     * @type {Array<LanguageDto>}
     * @memberof ContainerDto
     */
    languages: Array<LanguageDto>;
}

/**
 * Check if a given object implements the ContainerDto interface.
 */
export function instanceOfContainerDto(value: object): value is ContainerDto {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('tenantId' in value) || value['tenantId'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('languages' in value) || value['languages'] === undefined) return false;
    return true;
}

export function ContainerDtoFromJSON(json: any): ContainerDto {
    return ContainerDtoFromJSONTyped(json, false);
}

export function ContainerDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContainerDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'tenantId': json['tenantId'],
        'name': json['name'],
        'title': InternationalizedStringFromJSON(json['title']),
        'condition': json['condition'] == null ? undefined : ContainerDtoAllOfConditionFromJSON(json['condition']),
        'languages': ((json['languages'] as Array<any>).map(LanguageDtoFromJSON)),
    };
}

export function ContainerDtoToJSON(value?: ContainerDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'tenantId': value['tenantId'],
        'name': value['name'],
        'title': InternationalizedStringToJSON(value['title']),
        'condition': ContainerDtoAllOfConditionToJSON(value['condition']),
        'languages': ((value['languages'] as Array<any>).map(LanguageDtoToJSON)),
    };
}

