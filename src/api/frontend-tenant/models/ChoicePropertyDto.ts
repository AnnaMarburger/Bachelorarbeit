/* tslint:disable */
/* eslint-disable */
/**
 * HSP Frontend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SelectionItem } from './SelectionItem';
import {
    SelectionItemFromJSON,
    SelectionItemFromJSONTyped,
    SelectionItemToJSON,
} from './SelectionItem';
import type { ChoicePropertyDtoAllOfValue } from './ChoicePropertyDtoAllOfValue';
import {
    ChoicePropertyDtoAllOfValueFromJSON,
    ChoicePropertyDtoAllOfValueFromJSONTyped,
    ChoicePropertyDtoAllOfValueToJSON,
} from './ChoicePropertyDtoAllOfValue';
import type { ElementType } from './ElementType';
import {
    ElementTypeFromJSON,
    ElementTypeFromJSONTyped,
    ElementTypeToJSON,
} from './ElementType';
import type { ChoicePropertyValidation } from './ChoicePropertyValidation';
import {
    ChoicePropertyValidationFromJSON,
    ChoicePropertyValidationFromJSONTyped,
    ChoicePropertyValidationToJSON,
} from './ChoicePropertyValidation';
import type { ContentDtoCondition } from './ContentDtoCondition';
import {
    ContentDtoConditionFromJSON,
    ContentDtoConditionFromJSONTyped,
    ContentDtoConditionToJSON,
} from './ContentDtoCondition';
import type { InternationalizedString } from './InternationalizedString';
import {
    InternationalizedStringFromJSON,
    InternationalizedStringFromJSONTyped,
    InternationalizedStringToJSON,
} from './InternationalizedString';
import type { PropertyDto } from './PropertyDto';
import {
    PropertyDtoFromJSON,
    PropertyDtoFromJSONTyped,
    PropertyDtoToJSON,
} from './PropertyDto';

/**
 * 
 * @export
 * @interface ChoicePropertyDto
 */
export interface ChoicePropertyDto extends PropertyDto {
    /**
     * 
     * @type {ChoicePropertyValidation}
     * @memberof ChoicePropertyDto
     */
    validation: ChoicePropertyValidation;
    /**
     * 
     * @type {boolean}
     * @memberof ChoicePropertyDto
     */
    multiSelection: boolean;
    /**
     * 
     * @type {Array<SelectionItem>}
     * @memberof ChoicePropertyDto
     */
    choices: Array<SelectionItem>;
    /**
     * 
     * @type {ChoicePropertyDtoAllOfValue}
     * @memberof ChoicePropertyDto
     */
    value?: ChoicePropertyDtoAllOfValue;
}

/**
 * Check if a given object implements the ChoicePropertyDto interface.
 */
export function instanceOfChoicePropertyDto(value: object): value is ChoicePropertyDto {
    if (!('validation' in value) || value['validation'] === undefined) return false;
    if (!('multiSelection' in value) || value['multiSelection'] === undefined) return false;
    if (!('choices' in value) || value['choices'] === undefined) return false;
    return true;
}

export function ChoicePropertyDtoFromJSON(json: any): ChoicePropertyDto {
    return ChoicePropertyDtoFromJSONTyped(json, false);
}

export function ChoicePropertyDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChoicePropertyDto {
    if (json == null) {
        return json;
    }
    return {
        ...PropertyDtoFromJSONTyped(json, ignoreDiscriminator),
        'validation': ChoicePropertyValidationFromJSON(json['validation']),
        'multiSelection': json['multiSelection'],
        'choices': ((json['choices'] as Array<any>).map(SelectionItemFromJSON)),
        'value': json['value'] == null ? undefined : ChoicePropertyDtoAllOfValueFromJSON(json['value']),
    };
}

export function ChoicePropertyDtoToJSON(value?: ChoicePropertyDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        ...PropertyDtoToJSON(value),
        'validation': ChoicePropertyValidationToJSON(value['validation']),
        'multiSelection': value['multiSelection'],
        'choices': ((value['choices'] as Array<any>).map(SelectionItemToJSON)),
        'value': ChoicePropertyDtoAllOfValueToJSON(value['value']),
    };
}

