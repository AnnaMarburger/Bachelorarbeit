/* tslint:disable */
/* eslint-disable */
/**
 * HSP Frontend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface NodeAttribute
 */
export interface NodeAttribute {
    /**
     * 
     * @type {string}
     * @memberof NodeAttribute
     */
    display?: string;
    /**
     * 
     * @type {number}
     * @memberof NodeAttribute
     */
    level?: number;
    /**
     * 
     * @type {string}
     * @memberof NodeAttribute
     */
    textAlign?: string;
    /**
     * 
     * @type {number}
     * @memberof NodeAttribute
     */
    colspan?: number;
    /**
     * 
     * @type {number}
     * @memberof NodeAttribute
     */
    rowspan?: number;
    /**
     * 
     * @type {number}
     * @memberof NodeAttribute
     */
    colwidth?: number;
    /**
     * 
     * @type {number}
     * @memberof NodeAttribute
     */
    start?: number;
    /**
     * 
     * @type {string}
     * @memberof NodeAttribute
     */
    fileId?: string;
    /**
     * 
     * @type {string}
     * @memberof NodeAttribute
     */
    src?: string;
    /**
     * 
     * @type {string}
     * @memberof NodeAttribute
     */
    alt?: string;
    /**
     * 
     * @type {string}
     * @memberof NodeAttribute
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof NodeAttribute
     */
    caption?: string;
    /**
     * 
     * @type {string}
     * @memberof NodeAttribute
     */
    html?: string;
}

/**
 * Check if a given object implements the NodeAttribute interface.
 */
export function instanceOfNodeAttribute(value: object): value is NodeAttribute {
    return true;
}

export function NodeAttributeFromJSON(json: any): NodeAttribute {
    return NodeAttributeFromJSONTyped(json, false);
}

export function NodeAttributeFromJSONTyped(json: any, ignoreDiscriminator: boolean): NodeAttribute {
    if (json == null) {
        return json;
    }
    return {
        
        'display': json['display'] == null ? undefined : json['display'],
        'level': json['level'] == null ? undefined : json['level'],
        'textAlign': json['textAlign'] == null ? undefined : json['textAlign'],
        'colspan': json['colspan'] == null ? undefined : json['colspan'],
        'rowspan': json['rowspan'] == null ? undefined : json['rowspan'],
        'colwidth': json['colwidth'] == null ? undefined : json['colwidth'],
        'start': json['start'] == null ? undefined : json['start'],
        'fileId': json['fileId'] == null ? undefined : json['fileId'],
        'src': json['src'] == null ? undefined : json['src'],
        'alt': json['alt'] == null ? undefined : json['alt'],
        'title': json['title'] == null ? undefined : json['title'],
        'caption': json['caption'] == null ? undefined : json['caption'],
        'html': json['html'] == null ? undefined : json['html'],
    };
}

export function NodeAttributeToJSON(value?: NodeAttribute | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'display': value['display'],
        'level': value['level'],
        'textAlign': value['textAlign'],
        'colspan': value['colspan'],
        'rowspan': value['rowspan'],
        'colwidth': value['colwidth'],
        'start': value['start'],
        'fileId': value['fileId'],
        'src': value['src'],
        'alt': value['alt'],
        'title': value['title'],
        'caption': value['caption'],
        'html': value['html'],
    };
}

