/* tslint:disable */
/* eslint-disable */
/**
 * HSP Frontend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { QuestionnaireInstanceState } from './QuestionnaireInstanceState';
import {
    QuestionnaireInstanceStateFromJSON,
    QuestionnaireInstanceStateFromJSONTyped,
    QuestionnaireInstanceStateToJSON,
} from './QuestionnaireInstanceState';
import type { LanguageDto } from './LanguageDto';
import {
    LanguageDtoFromJSON,
    LanguageDtoFromJSONTyped,
    LanguageDtoToJSON,
} from './LanguageDto';
import type { ContentPageDto } from './ContentPageDto';
import {
    ContentPageDtoFromJSON,
    ContentPageDtoFromJSONTyped,
    ContentPageDtoToJSON,
} from './ContentPageDto';

/**
 * 
 * @export
 * @interface QuestionnaireInstanceDetailsDto
 */
export interface QuestionnaireInstanceDetailsDto {
    /**
     * 
     * @type {string}
     * @memberof QuestionnaireInstanceDetailsDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionnaireInstanceDetailsDto
     */
    tenantId: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionnaireInstanceDetailsDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionnaireInstanceDetailsDto
     */
    questionnaireId: string;
    /**
     * 
     * @type {number}
     * @memberof QuestionnaireInstanceDetailsDto
     */
    questionnaireVersion: number;
    /**
     * 
     * @type {string}
     * @memberof QuestionnaireInstanceDetailsDto
     */
    questionnaireName: string;
    /**
     * 
     * @type {Date}
     * @memberof QuestionnaireInstanceDetailsDto
     */
    started?: Date;
    /**
     * 
     * @type {Date}
     * @memberof QuestionnaireInstanceDetailsDto
     */
    completed?: Date;
    /**
     * 
     * @type {Date}
     * @memberof QuestionnaireInstanceDetailsDto
     */
    hidden?: Date;
    /**
     * 
     * @type {QuestionnaireInstanceState}
     * @memberof QuestionnaireInstanceDetailsDto
     */
    state: QuestionnaireInstanceState;
    /**
     * 
     * @type {Array<ContentPageDto>}
     * @memberof QuestionnaireInstanceDetailsDto
     */
    pages: Array<ContentPageDto>;
    /**
     * 
     * @type {Array<LanguageDto>}
     * @memberof QuestionnaireInstanceDetailsDto
     */
    languages: Array<LanguageDto>;
}

/**
 * Check if a given object implements the QuestionnaireInstanceDetailsDto interface.
 */
export function instanceOfQuestionnaireInstanceDetailsDto(value: object): value is QuestionnaireInstanceDetailsDto {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('tenantId' in value) || value['tenantId'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('questionnaireId' in value) || value['questionnaireId'] === undefined) return false;
    if (!('questionnaireVersion' in value) || value['questionnaireVersion'] === undefined) return false;
    if (!('questionnaireName' in value) || value['questionnaireName'] === undefined) return false;
    if (!('state' in value) || value['state'] === undefined) return false;
    if (!('pages' in value) || value['pages'] === undefined) return false;
    if (!('languages' in value) || value['languages'] === undefined) return false;
    return true;
}

export function QuestionnaireInstanceDetailsDtoFromJSON(json: any): QuestionnaireInstanceDetailsDto {
    return QuestionnaireInstanceDetailsDtoFromJSONTyped(json, false);
}

export function QuestionnaireInstanceDetailsDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestionnaireInstanceDetailsDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'tenantId': json['tenantId'],
        'name': json['name'],
        'questionnaireId': json['questionnaireId'],
        'questionnaireVersion': json['questionnaireVersion'],
        'questionnaireName': json['questionnaireName'],
        'started': json['started'] == null ? undefined : (new Date(json['started'])),
        'completed': json['completed'] == null ? undefined : (new Date(json['completed'])),
        'hidden': json['hidden'] == null ? undefined : (new Date(json['hidden'])),
        'state': QuestionnaireInstanceStateFromJSON(json['state']),
        'pages': ((json['pages'] as Array<any>).map(ContentPageDtoFromJSON)),
        'languages': ((json['languages'] as Array<any>).map(LanguageDtoFromJSON)),
    };
}

export function QuestionnaireInstanceDetailsDtoToJSON(value?: QuestionnaireInstanceDetailsDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'tenantId': value['tenantId'],
        'name': value['name'],
        'questionnaireId': value['questionnaireId'],
        'questionnaireVersion': value['questionnaireVersion'],
        'questionnaireName': value['questionnaireName'],
        'started': value['started'] == null ? undefined : ((value['started'] as any).toISOString()),
        'completed': value['completed'] == null ? undefined : ((value['completed'] as any).toISOString()),
        'hidden': value['hidden'] == null ? undefined : ((value['hidden'] as any).toISOString()),
        'state': QuestionnaireInstanceStateToJSON(value['state']),
        'pages': ((value['pages'] as Array<any>).map(ContentPageDtoToJSON)),
        'languages': ((value['languages'] as Array<any>).map(LanguageDtoToJSON)),
    };
}

