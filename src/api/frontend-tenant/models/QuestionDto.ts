/* tslint:disable */
/* eslint-disable */
/**
 * HSP Frontend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ContentDto } from './ContentDto';
import {
    ContentDtoFromJSON,
    ContentDtoFromJSONTyped,
    ContentDtoToJSON,
} from './ContentDto';
import type { QuestionDtoAllOfHint } from './QuestionDtoAllOfHint';
import {
    QuestionDtoAllOfHintFromJSON,
    QuestionDtoAllOfHintFromJSONTyped,
    QuestionDtoAllOfHintToJSON,
} from './QuestionDtoAllOfHint';
import type { ElementType } from './ElementType';
import {
    ElementTypeFromJSON,
    ElementTypeFromJSONTyped,
    ElementTypeToJSON,
} from './ElementType';
import type { ContentDtoCondition } from './ContentDtoCondition';
import {
    ContentDtoConditionFromJSON,
    ContentDtoConditionFromJSONTyped,
    ContentDtoConditionToJSON,
} from './ContentDtoCondition';
import type { InternationalizedString } from './InternationalizedString';
import {
    InternationalizedStringFromJSON,
    InternationalizedStringFromJSONTyped,
    InternationalizedStringToJSON,
} from './InternationalizedString';

/**
 * 
 * @export
 * @interface QuestionDto
 */
export interface QuestionDto extends ContentDto {
    /**
     * 
     * @type {InternationalizedString}
     * @memberof QuestionDto
     */
    text: InternationalizedString;
    /**
     * 
     * @type {QuestionDtoAllOfHint}
     * @memberof QuestionDto
     */
    hint?: QuestionDtoAllOfHint;
}

/**
 * Check if a given object implements the QuestionDto interface.
 */
export function instanceOfQuestionDto(value: object): value is QuestionDto {
    if (!('text' in value) || value['text'] === undefined) return false;
    return true;
}

export function QuestionDtoFromJSON(json: any): QuestionDto {
    return QuestionDtoFromJSONTyped(json, false);
}

export function QuestionDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestionDto {
    if (json == null) {
        return json;
    }
    return {
        ...ContentDtoFromJSONTyped(json, ignoreDiscriminator),
        'text': InternationalizedStringFromJSON(json['text']),
        'hint': json['hint'] == null ? undefined : QuestionDtoAllOfHintFromJSON(json['hint']),
    };
}

export function QuestionDtoToJSON(value?: QuestionDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        ...ContentDtoToJSON(value),
        'text': InternationalizedStringToJSON(value['text']),
        'hint': QuestionDtoAllOfHintToJSON(value['hint']),
    };
}

