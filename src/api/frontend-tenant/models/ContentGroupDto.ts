/* tslint:disable */
/* eslint-disable */
/**
 * HSP Frontend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ContentDto } from './ContentDto';
import {
    ContentDtoFromJSON,
    ContentDtoFromJSONTyped,
    ContentDtoToJSON,
} from './ContentDto';
import type { ElementType } from './ElementType';
import {
    ElementTypeFromJSON,
    ElementTypeFromJSONTyped,
    ElementTypeToJSON,
} from './ElementType';
import type { ContentDtoCondition } from './ContentDtoCondition';
import {
    ContentDtoConditionFromJSON,
    ContentDtoConditionFromJSONTyped,
    ContentDtoConditionToJSON,
} from './ContentDtoCondition';

/**
 * 
 * @export
 * @interface ContentGroupDto
 */
export interface ContentGroupDto extends ContentDto {
    /**
     * 
     * @type {Array<ContentDto>}
     * @memberof ContentGroupDto
     */
    contents: Array<ContentDto>;
}

/**
 * Check if a given object implements the ContentGroupDto interface.
 */
export function instanceOfContentGroupDto(value: object): value is ContentGroupDto {
    if (!('contents' in value) || value['contents'] === undefined) return false;
    return true;
}

export function ContentGroupDtoFromJSON(json: any): ContentGroupDto {
    return ContentGroupDtoFromJSONTyped(json, false);
}

export function ContentGroupDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContentGroupDto {
    if (json == null) {
        return json;
    }
    return {
        ...ContentDtoFromJSONTyped(json, ignoreDiscriminator),
        'contents': ((json['contents'] as Array<any>).map(ContentDtoFromJSON)),
    };
}

export function ContentGroupDtoToJSON(value?: ContentGroupDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        ...ContentDtoToJSON(value),
        'contents': ((value['contents'] as Array<any>).map(ContentDtoToJSON)),
    };
}

