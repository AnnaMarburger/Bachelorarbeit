/* tslint:disable */
/* eslint-disable */
/**
 * HSP Frontend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import { ChoiceAnswerDtoFromJSONTyped } from './ChoiceAnswerDto';
import { DateAnswerDtoFromJSONTyped } from './DateAnswerDto';
import { DateTimeAnswerDtoFromJSONTyped } from './DateTimeAnswerDto';
import { LikertAnswerDtoFromJSONTyped } from './LikertAnswerDto';
import { MatrixAnswerDtoFromJSONTyped } from './MatrixAnswerDto';
import { NumberAnswerDtoFromJSONTyped } from './NumberAnswerDto';
import { SliderAnswerDtoFromJSONTyped } from './SliderAnswerDto';
import { TextAnswerDtoFromJSONTyped } from './TextAnswerDto';
import { TimeAnswerDtoFromJSONTyped } from './TimeAnswerDto';
/**
 * 
 * @export
 * @interface AnswerDto
 */
export interface AnswerDto {
    /**
     * 
     * @type {string}
     * @memberof AnswerDto
     */
    questionId: string;
    /**
     * 
     * @type {Date}
     * @memberof AnswerDto
     */
    answered?: Date;
    /**
     * 
     * @type {string}
     * @memberof AnswerDto
     */
    $type: string;
}

/**
 * Check if a given object implements the AnswerDto interface.
 */
export function instanceOfAnswerDto(value: object): value is AnswerDto {
    if (!('questionId' in value) || value['questionId'] === undefined) return false;
    if (!('$type' in value) || value['$type'] === undefined) return false;
    return true;
}

export function AnswerDtoFromJSON(json: any): AnswerDto {
    return AnswerDtoFromJSONTyped(json, false);
}

export function AnswerDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AnswerDto {
    if (json == null) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['$type'] === 'ChoiceAnswerDto') {
            return ChoiceAnswerDtoFromJSONTyped(json, true);
        }
        if (json['$type'] === 'DateAnswerDto') {
            return DateAnswerDtoFromJSONTyped(json, true);
        }
        if (json['$type'] === 'DateTimeAnswerDto') {
            return DateTimeAnswerDtoFromJSONTyped(json, true);
        }
        if (json['$type'] === 'LikertAnswerDto') {
            return LikertAnswerDtoFromJSONTyped(json, true);
        }
        if (json['$type'] === 'MatrixAnswerDto') {
            return MatrixAnswerDtoFromJSONTyped(json, true);
        }
        if (json['$type'] === 'NumberAnswerDto') {
            return NumberAnswerDtoFromJSONTyped(json, true);
        }
        if (json['$type'] === 'SliderAnswerDto') {
            return SliderAnswerDtoFromJSONTyped(json, true);
        }
        if (json['$type'] === 'TextAnswerDto') {
            return TextAnswerDtoFromJSONTyped(json, true);
        }
        if (json['$type'] === 'TimeAnswerDto') {
            return TimeAnswerDtoFromJSONTyped(json, true);
        }
    }
    return {
        
        'questionId': json['questionId'],
        'answered': json['answered'] == null ? undefined : (new Date(json['answered'])),
        '$type': json['$type'],
    };
}

export function AnswerDtoToJSON(value?: AnswerDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'questionId': value['questionId'],
        'answered': value['answered'] == null ? undefined : ((value['answered'] as any).toISOString()),
        '$type': value['$type'],
    };
}

