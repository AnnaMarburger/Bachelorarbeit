/* tslint:disable */
/* eslint-disable */
/**
 * HSP Frontend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ContextObjectDetailsDto,
  ContextObjectInstanceDetailsDto,
  PaginatedListOfContextObjectDto,
  PaginatedListOfContextObjectInstanceDto,
  ProblemDetails,
  QrCodeDto,
  SortingParameter,
  UpdateContextObjectInstanceCommand,
} from '../models/index';
import {
    ContextObjectDetailsDtoFromJSON,
    ContextObjectDetailsDtoToJSON,
    ContextObjectInstanceDetailsDtoFromJSON,
    ContextObjectInstanceDetailsDtoToJSON,
    PaginatedListOfContextObjectDtoFromJSON,
    PaginatedListOfContextObjectDtoToJSON,
    PaginatedListOfContextObjectInstanceDtoFromJSON,
    PaginatedListOfContextObjectInstanceDtoToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    QrCodeDtoFromJSON,
    QrCodeDtoToJSON,
    SortingParameterFromJSON,
    SortingParameterToJSON,
    UpdateContextObjectInstanceCommandFromJSON,
    UpdateContextObjectInstanceCommandToJSON,
} from '../models/index';

export interface ContextObjectsCreateContextObjectInstanceRequest {
    contextObjectId: string;
}

export interface ContextObjectsGenerateContextObjectInstanceShareQrCodeRequest {
    contextObjectInstanceId: string;
    appId: string;
}

export interface ContextObjectsGetContextObjectRequest {
    contextObjectId: string;
}

export interface ContextObjectsGetContextObjectInstanceRequest {
    contextObjectId: string;
    contextObjectInstanceId: string;
}

export interface ContextObjectsGetContextObjectInstancesRequest {
    pageNumber?: number;
    pageSize?: number;
    sorting?: Array<SortingParameter>;
    search?: string;
    projectIds?: Array<string>;
    contextObjectIds?: Array<string>;
}

export interface ContextObjectsGetContextObjectsRequest {
    pageNumber?: number;
    pageSize?: number;
    sorting?: Array<SortingParameter>;
    search?: string;
    projectIds?: Array<string>;
}

export interface ContextObjectsUpdateContextObjectInstanceRequest {
    contextObjectId: string;
    contextObjectInstanceId: string;
    updateContextObjectInstanceCommand: UpdateContextObjectInstanceCommand;
}

export interface ContextObjectsUseContextObjectInstanceShareQrCodeRequest {
    contextObjectInstanceId: string;
    body: string;
}

/**
 * 
 */
export class ContextObjectsApi extends runtime.BaseAPI {

    /**
     */
    async contextObjectsCreateContextObjectInstanceRaw(requestParameters: ContextObjectsCreateContextObjectInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContextObjectInstanceDetailsDto>> {
        if (requestParameters['contextObjectId'] == null) {
            throw new runtime.RequiredError(
                'contextObjectId',
                'Required parameter "contextObjectId" was null or undefined when calling contextObjectsCreateContextObjectInstance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/context-objects/{contextObjectId}/instances`.replace(`{${"contextObjectId"}}`, encodeURIComponent(String(requestParameters['contextObjectId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextObjectInstanceDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async contextObjectsCreateContextObjectInstance(requestParameters: ContextObjectsCreateContextObjectInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContextObjectInstanceDetailsDto> {
        const response = await this.contextObjectsCreateContextObjectInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async contextObjectsGenerateContextObjectInstanceShareQrCodeRaw(requestParameters: ContextObjectsGenerateContextObjectInstanceShareQrCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QrCodeDto>> {
        if (requestParameters['contextObjectInstanceId'] == null) {
            throw new runtime.RequiredError(
                'contextObjectInstanceId',
                'Required parameter "contextObjectInstanceId" was null or undefined when calling contextObjectsGenerateContextObjectInstanceShareQrCode().'
            );
        }

        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling contextObjectsGenerateContextObjectInstanceShareQrCode().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['appId'] != null) {
            queryParameters['appId'] = requestParameters['appId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/context-objects/objectinstances/{contextObjectInstanceId}/generate-share-qr-code`.replace(`{${"contextObjectInstanceId"}}`, encodeURIComponent(String(requestParameters['contextObjectInstanceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QrCodeDtoFromJSON(jsonValue));
    }

    /**
     */
    async contextObjectsGenerateContextObjectInstanceShareQrCode(requestParameters: ContextObjectsGenerateContextObjectInstanceShareQrCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QrCodeDto> {
        const response = await this.contextObjectsGenerateContextObjectInstanceShareQrCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async contextObjectsGetContextObjectRaw(requestParameters: ContextObjectsGetContextObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContextObjectDetailsDto>> {
        if (requestParameters['contextObjectId'] == null) {
            throw new runtime.RequiredError(
                'contextObjectId',
                'Required parameter "contextObjectId" was null or undefined when calling contextObjectsGetContextObject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/context-objects/{contextObjectId}`.replace(`{${"contextObjectId"}}`, encodeURIComponent(String(requestParameters['contextObjectId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextObjectDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async contextObjectsGetContextObject(requestParameters: ContextObjectsGetContextObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContextObjectDetailsDto> {
        const response = await this.contextObjectsGetContextObjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async contextObjectsGetContextObjectInstanceRaw(requestParameters: ContextObjectsGetContextObjectInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContextObjectInstanceDetailsDto>> {
        if (requestParameters['contextObjectId'] == null) {
            throw new runtime.RequiredError(
                'contextObjectId',
                'Required parameter "contextObjectId" was null or undefined when calling contextObjectsGetContextObjectInstance().'
            );
        }

        if (requestParameters['contextObjectInstanceId'] == null) {
            throw new runtime.RequiredError(
                'contextObjectInstanceId',
                'Required parameter "contextObjectInstanceId" was null or undefined when calling contextObjectsGetContextObjectInstance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/context-objects/{contextObjectId}/instances/{contextObjectInstanceId}`.replace(`{${"contextObjectId"}}`, encodeURIComponent(String(requestParameters['contextObjectId']))).replace(`{${"contextObjectInstanceId"}}`, encodeURIComponent(String(requestParameters['contextObjectInstanceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextObjectInstanceDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async contextObjectsGetContextObjectInstance(requestParameters: ContextObjectsGetContextObjectInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContextObjectInstanceDetailsDto> {
        const response = await this.contextObjectsGetContextObjectInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async contextObjectsGetContextObjectInstancesRaw(requestParameters: ContextObjectsGetContextObjectInstancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfContextObjectInstanceDto>> {
        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sorting'] != null) {
            queryParameters['sorting'] = requestParameters['sorting'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['projectIds'] != null) {
            queryParameters['projectIds'] = requestParameters['projectIds'];
        }

        if (requestParameters['contextObjectIds'] != null) {
            queryParameters['contextObjectIds'] = requestParameters['contextObjectIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/context-objects/instances`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfContextObjectInstanceDtoFromJSON(jsonValue));
    }

    /**
     */
    async contextObjectsGetContextObjectInstances(requestParameters: ContextObjectsGetContextObjectInstancesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfContextObjectInstanceDto> {
        const response = await this.contextObjectsGetContextObjectInstancesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async contextObjectsGetContextObjectsRaw(requestParameters: ContextObjectsGetContextObjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfContextObjectDto>> {
        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sorting'] != null) {
            queryParameters['sorting'] = requestParameters['sorting'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['projectIds'] != null) {
            queryParameters['projectIds'] = requestParameters['projectIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/context-objects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfContextObjectDtoFromJSON(jsonValue));
    }

    /**
     */
    async contextObjectsGetContextObjects(requestParameters: ContextObjectsGetContextObjectsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfContextObjectDto> {
        const response = await this.contextObjectsGetContextObjectsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async contextObjectsUpdateContextObjectInstanceRaw(requestParameters: ContextObjectsUpdateContextObjectInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContextObjectInstanceDetailsDto>> {
        if (requestParameters['contextObjectId'] == null) {
            throw new runtime.RequiredError(
                'contextObjectId',
                'Required parameter "contextObjectId" was null or undefined when calling contextObjectsUpdateContextObjectInstance().'
            );
        }

        if (requestParameters['contextObjectInstanceId'] == null) {
            throw new runtime.RequiredError(
                'contextObjectInstanceId',
                'Required parameter "contextObjectInstanceId" was null or undefined when calling contextObjectsUpdateContextObjectInstance().'
            );
        }

        if (requestParameters['updateContextObjectInstanceCommand'] == null) {
            throw new runtime.RequiredError(
                'updateContextObjectInstanceCommand',
                'Required parameter "updateContextObjectInstanceCommand" was null or undefined when calling contextObjectsUpdateContextObjectInstance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/context-objects/{contextObjectId}/instances/{contextObjectInstanceId}`.replace(`{${"contextObjectId"}}`, encodeURIComponent(String(requestParameters['contextObjectId']))).replace(`{${"contextObjectInstanceId"}}`, encodeURIComponent(String(requestParameters['contextObjectInstanceId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateContextObjectInstanceCommandToJSON(requestParameters['updateContextObjectInstanceCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextObjectInstanceDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async contextObjectsUpdateContextObjectInstance(requestParameters: ContextObjectsUpdateContextObjectInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContextObjectInstanceDetailsDto> {
        const response = await this.contextObjectsUpdateContextObjectInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async contextObjectsUseContextObjectInstanceShareQrCodeRaw(requestParameters: ContextObjectsUseContextObjectInstanceShareQrCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['contextObjectInstanceId'] == null) {
            throw new runtime.RequiredError(
                'contextObjectInstanceId',
                'Required parameter "contextObjectInstanceId" was null or undefined when calling contextObjectsUseContextObjectInstanceShareQrCode().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling contextObjectsUseContextObjectInstanceShareQrCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/context-objects/objectinstances/{contextObjectInstanceId}/use-share-qr-code`.replace(`{${"contextObjectInstanceId"}}`, encodeURIComponent(String(requestParameters['contextObjectInstanceId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async contextObjectsUseContextObjectInstanceShareQrCode(requestParameters: ContextObjectsUseContextObjectInstanceShareQrCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.contextObjectsUseContextObjectInstanceShareQrCodeRaw(requestParameters, initOverrides);
    }

}
