/* tslint:disable */
/* eslint-disable */
/**
 * HSP Frontend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppInstallationDto,
  ClientSettingDto,
  RegisterAppInstallationCommand,
  UnregisterAppInstallationCommand,
} from '../models/index';
import {
    AppInstallationDtoFromJSON,
    AppInstallationDtoToJSON,
    ClientSettingDtoFromJSON,
    ClientSettingDtoToJSON,
    RegisterAppInstallationCommandFromJSON,
    RegisterAppInstallationCommandToJSON,
    UnregisterAppInstallationCommandFromJSON,
    UnregisterAppInstallationCommandToJSON,
} from '../models/index';

export interface AppsGetAppInstallationRequest {
    deviceIdentifier: string;
    appIndentifier: string;
}

export interface AppsGetAppSettingRequest {
    appIdentifier: string;
    key: string;
}

export interface AppsRegisterAppInstallationRequest {
    registerAppInstallationCommand: RegisterAppInstallationCommand;
}

export interface AppsUnregisterAppInstallationRequest {
    unregisterAppInstallationCommand: UnregisterAppInstallationCommand;
}

export interface AppsUpdateAppSettingRequest {
    appIdentifier: string;
    key: string;
    body: string;
}

/**
 * 
 */
export class AppsApi extends runtime.BaseAPI {

    /**
     */
    async appsGetAppInstallationRaw(requestParameters: AppsGetAppInstallationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppInstallationDto>> {
        if (requestParameters['deviceIdentifier'] == null) {
            throw new runtime.RequiredError(
                'deviceIdentifier',
                'Required parameter "deviceIdentifier" was null or undefined when calling appsGetAppInstallation().'
            );
        }

        if (requestParameters['appIndentifier'] == null) {
            throw new runtime.RequiredError(
                'appIndentifier',
                'Required parameter "appIndentifier" was null or undefined when calling appsGetAppInstallation().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['deviceIdentifier'] != null) {
            queryParameters['deviceIdentifier'] = requestParameters['deviceIdentifier'];
        }

        if (requestParameters['appIndentifier'] != null) {
            queryParameters['appIndentifier'] = requestParameters['appIndentifier'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/apps/appinstallations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppInstallationDtoFromJSON(jsonValue));
    }

    /**
     */
    async appsGetAppInstallation(requestParameters: AppsGetAppInstallationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppInstallationDto> {
        const response = await this.appsGetAppInstallationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsGetAppSettingRaw(requestParameters: AppsGetAppSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientSettingDto>> {
        if (requestParameters['appIdentifier'] == null) {
            throw new runtime.RequiredError(
                'appIdentifier',
                'Required parameter "appIdentifier" was null or undefined when calling appsGetAppSetting().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling appsGetAppSetting().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['appIdentifier'] != null) {
            queryParameters['appIdentifier'] = requestParameters['appIdentifier'];
        }

        if (requestParameters['key'] != null) {
            queryParameters['key'] = requestParameters['key'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/apps/setting`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientSettingDtoFromJSON(jsonValue));
    }

    /**
     */
    async appsGetAppSetting(requestParameters: AppsGetAppSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientSettingDto> {
        const response = await this.appsGetAppSettingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsRegisterAppInstallationRaw(requestParameters: AppsRegisterAppInstallationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppInstallationDto>> {
        if (requestParameters['registerAppInstallationCommand'] == null) {
            throw new runtime.RequiredError(
                'registerAppInstallationCommand',
                'Required parameter "registerAppInstallationCommand" was null or undefined when calling appsRegisterAppInstallation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/apps`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterAppInstallationCommandToJSON(requestParameters['registerAppInstallationCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppInstallationDtoFromJSON(jsonValue));
    }

    /**
     */
    async appsRegisterAppInstallation(requestParameters: AppsRegisterAppInstallationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppInstallationDto> {
        const response = await this.appsRegisterAppInstallationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appsUnregisterAppInstallationRaw(requestParameters: AppsUnregisterAppInstallationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['unregisterAppInstallationCommand'] == null) {
            throw new runtime.RequiredError(
                'unregisterAppInstallationCommand',
                'Required parameter "unregisterAppInstallationCommand" was null or undefined when calling appsUnregisterAppInstallation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/apps`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: UnregisterAppInstallationCommandToJSON(requestParameters['unregisterAppInstallationCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appsUnregisterAppInstallation(requestParameters: AppsUnregisterAppInstallationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appsUnregisterAppInstallationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appsUpdateAppSettingRaw(requestParameters: AppsUpdateAppSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientSettingDto>> {
        if (requestParameters['appIdentifier'] == null) {
            throw new runtime.RequiredError(
                'appIdentifier',
                'Required parameter "appIdentifier" was null or undefined when calling appsUpdateAppSetting().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling appsUpdateAppSetting().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling appsUpdateAppSetting().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['appIdentifier'] != null) {
            queryParameters['appIdentifier'] = requestParameters['appIdentifier'];
        }

        if (requestParameters['key'] != null) {
            queryParameters['key'] = requestParameters['key'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/apps/setting`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientSettingDtoFromJSON(jsonValue));
    }

    /**
     */
    async appsUpdateAppSetting(requestParameters: AppsUpdateAppSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientSettingDto> {
        const response = await this.appsUpdateAppSettingRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
