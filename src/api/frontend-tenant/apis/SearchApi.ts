/* tslint:disable */
/* eslint-disable */
/**
 * HSP Frontend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedListOfSearchResultDto,
} from '../models/index';
import {
    PaginatedListOfSearchResultDtoFromJSON,
    PaginatedListOfSearchResultDtoToJSON,
} from '../models/index';

export interface SearchSearchRequest {
    pageNumber?: number;
    pageSize?: number;
    search?: string;
    projectIds?: Array<string>;
}

export interface SearchWordSuggestionsRequest {
    limit?: number;
    search?: string;
    projectIds?: Array<string>;
}

/**
 * 
 */
export class SearchApi extends runtime.BaseAPI {

    /**
     */
    async searchSearchRaw(requestParameters: SearchSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfSearchResultDto>> {
        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['projectIds'] != null) {
            queryParameters['projectIds'] = requestParameters['projectIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfSearchResultDtoFromJSON(jsonValue));
    }

    /**
     */
    async searchSearch(requestParameters: SearchSearchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfSearchResultDto> {
        const response = await this.searchSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async searchWordSuggestionsRaw(requestParameters: SearchWordSuggestionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['projectIds'] != null) {
            queryParameters['projectIds'] = requestParameters['projectIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/search/word-suggestions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async searchWordSuggestions(requestParameters: SearchWordSuggestionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.searchWordSuggestionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
