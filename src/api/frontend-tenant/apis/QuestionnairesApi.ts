/* tslint:disable */
/* eslint-disable */
/**
 * HSP Frontend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedListOfQuestionnaireDto,
  PaginatedListOfQuestionnaireInstanceDto,
  ProblemDetails,
  QuestionnaireDetailsDto,
  QuestionnaireInstanceDetailsDto,
  QuestionnaireInstanceState,
  QuestionnaireInstantiationMode,
  SortingParameter,
  UpdateQuestionnaireInstanceCommand,
} from '../models/index';
import {
    PaginatedListOfQuestionnaireDtoFromJSON,
    PaginatedListOfQuestionnaireDtoToJSON,
    PaginatedListOfQuestionnaireInstanceDtoFromJSON,
    PaginatedListOfQuestionnaireInstanceDtoToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    QuestionnaireDetailsDtoFromJSON,
    QuestionnaireDetailsDtoToJSON,
    QuestionnaireInstanceDetailsDtoFromJSON,
    QuestionnaireInstanceDetailsDtoToJSON,
    QuestionnaireInstanceStateFromJSON,
    QuestionnaireInstanceStateToJSON,
    QuestionnaireInstantiationModeFromJSON,
    QuestionnaireInstantiationModeToJSON,
    SortingParameterFromJSON,
    SortingParameterToJSON,
    UpdateQuestionnaireInstanceCommandFromJSON,
    UpdateQuestionnaireInstanceCommandToJSON,
} from '../models/index';

export interface QuestionnairesCreateQuestionnaireInstanceRequest {
    questionnaireId: string;
}

export interface QuestionnairesGetQuestionnaireRequest {
    questionnaireId: string;
}

export interface QuestionnairesGetQuestionnaireInstanceRequest {
    questionnaireId: string;
    questionnaireInstanceId: string;
}

export interface QuestionnairesGetQuestionnaireInstancesRequest {
    pageNumber?: number;
    pageSize?: number;
    sorting?: Array<SortingParameter>;
    search?: string;
    from?: Date;
    until?: Date;
    projectIds?: Array<string>;
    questionnaireIds?: Array<string>;
    states?: Array<QuestionnaireInstanceState>;
    showHidden?: boolean;
}

export interface QuestionnairesGetQuestionnairesRequest {
    pageNumber?: number;
    pageSize?: number;
    sorting?: Array<SortingParameter>;
    search?: string;
    projectIds?: Array<string>;
    instantiationModes?: Array<QuestionnaireInstantiationMode>;
}

export interface QuestionnairesUpdateQuestionnaireInstanceRequest {
    questionnaireId: string;
    questionnaireInstanceId: string;
    updateQuestionnaireInstanceCommand: UpdateQuestionnaireInstanceCommand;
}

/**
 * 
 */
export class QuestionnairesApi extends runtime.BaseAPI {

    /**
     */
    async questionnairesCreateQuestionnaireInstanceRaw(requestParameters: QuestionnairesCreateQuestionnaireInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionnaireInstanceDetailsDto>> {
        if (requestParameters['questionnaireId'] == null) {
            throw new runtime.RequiredError(
                'questionnaireId',
                'Required parameter "questionnaireId" was null or undefined when calling questionnairesCreateQuestionnaireInstance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/questionnaires/{questionnaireId}/instances`.replace(`{${"questionnaireId"}}`, encodeURIComponent(String(requestParameters['questionnaireId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionnaireInstanceDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async questionnairesCreateQuestionnaireInstance(requestParameters: QuestionnairesCreateQuestionnaireInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionnaireInstanceDetailsDto> {
        const response = await this.questionnairesCreateQuestionnaireInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async questionnairesGetQuestionnaireRaw(requestParameters: QuestionnairesGetQuestionnaireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionnaireDetailsDto>> {
        if (requestParameters['questionnaireId'] == null) {
            throw new runtime.RequiredError(
                'questionnaireId',
                'Required parameter "questionnaireId" was null or undefined when calling questionnairesGetQuestionnaire().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/questionnaires/{questionnaireId}`.replace(`{${"questionnaireId"}}`, encodeURIComponent(String(requestParameters['questionnaireId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionnaireDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async questionnairesGetQuestionnaire(requestParameters: QuestionnairesGetQuestionnaireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionnaireDetailsDto> {
        const response = await this.questionnairesGetQuestionnaireRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async questionnairesGetQuestionnaireInstanceRaw(requestParameters: QuestionnairesGetQuestionnaireInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionnaireInstanceDetailsDto>> {
        if (requestParameters['questionnaireId'] == null) {
            throw new runtime.RequiredError(
                'questionnaireId',
                'Required parameter "questionnaireId" was null or undefined when calling questionnairesGetQuestionnaireInstance().'
            );
        }

        if (requestParameters['questionnaireInstanceId'] == null) {
            throw new runtime.RequiredError(
                'questionnaireInstanceId',
                'Required parameter "questionnaireInstanceId" was null or undefined when calling questionnairesGetQuestionnaireInstance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/questionnaires/{questionnaireId}/instances/{questionnaireInstanceId}`.replace(`{${"questionnaireId"}}`, encodeURIComponent(String(requestParameters['questionnaireId']))).replace(`{${"questionnaireInstanceId"}}`, encodeURIComponent(String(requestParameters['questionnaireInstanceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionnaireInstanceDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async questionnairesGetQuestionnaireInstance(requestParameters: QuestionnairesGetQuestionnaireInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionnaireInstanceDetailsDto> {
        const response = await this.questionnairesGetQuestionnaireInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async questionnairesGetQuestionnaireInstancesRaw(requestParameters: QuestionnairesGetQuestionnaireInstancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfQuestionnaireInstanceDto>> {
        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sorting'] != null) {
            queryParameters['sorting'] = requestParameters['sorting'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['from'] != null) {
            queryParameters['from'] = (requestParameters['from'] as any).toISOString();
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = (requestParameters['until'] as any).toISOString();
        }

        if (requestParameters['projectIds'] != null) {
            queryParameters['projectIds'] = requestParameters['projectIds'];
        }

        if (requestParameters['questionnaireIds'] != null) {
            queryParameters['questionnaireIds'] = requestParameters['questionnaireIds'];
        }

        if (requestParameters['states'] != null) {
            queryParameters['states'] = requestParameters['states'];
        }

        if (requestParameters['showHidden'] != null) {
            queryParameters['showHidden'] = requestParameters['showHidden'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/questionnaires/instances`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfQuestionnaireInstanceDtoFromJSON(jsonValue));
    }

    /**
     */
    async questionnairesGetQuestionnaireInstances(requestParameters: QuestionnairesGetQuestionnaireInstancesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfQuestionnaireInstanceDto> {
        const response = await this.questionnairesGetQuestionnaireInstancesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async questionnairesGetQuestionnairesRaw(requestParameters: QuestionnairesGetQuestionnairesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfQuestionnaireDto>> {
        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sorting'] != null) {
            queryParameters['sorting'] = requestParameters['sorting'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['projectIds'] != null) {
            queryParameters['projectIds'] = requestParameters['projectIds'];
        }

        if (requestParameters['instantiationModes'] != null) {
            queryParameters['instantiationModes'] = requestParameters['instantiationModes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/questionnaires`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfQuestionnaireDtoFromJSON(jsonValue));
    }

    /**
     */
    async questionnairesGetQuestionnaires(requestParameters: QuestionnairesGetQuestionnairesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfQuestionnaireDto> {
        const response = await this.questionnairesGetQuestionnairesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async questionnairesUpdateQuestionnaireInstanceRaw(requestParameters: QuestionnairesUpdateQuestionnaireInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionnaireInstanceDetailsDto>> {
        if (requestParameters['questionnaireId'] == null) {
            throw new runtime.RequiredError(
                'questionnaireId',
                'Required parameter "questionnaireId" was null or undefined when calling questionnairesUpdateQuestionnaireInstance().'
            );
        }

        if (requestParameters['questionnaireInstanceId'] == null) {
            throw new runtime.RequiredError(
                'questionnaireInstanceId',
                'Required parameter "questionnaireInstanceId" was null or undefined when calling questionnairesUpdateQuestionnaireInstance().'
            );
        }

        if (requestParameters['updateQuestionnaireInstanceCommand'] == null) {
            throw new runtime.RequiredError(
                'updateQuestionnaireInstanceCommand',
                'Required parameter "updateQuestionnaireInstanceCommand" was null or undefined when calling questionnairesUpdateQuestionnaireInstance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/questionnaires/{questionnaireId}/instances/{questionnaireInstanceId}`.replace(`{${"questionnaireId"}}`, encodeURIComponent(String(requestParameters['questionnaireId']))).replace(`{${"questionnaireInstanceId"}}`, encodeURIComponent(String(requestParameters['questionnaireInstanceId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateQuestionnaireInstanceCommandToJSON(requestParameters['updateQuestionnaireInstanceCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionnaireInstanceDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async questionnairesUpdateQuestionnaireInstance(requestParameters: QuestionnairesUpdateQuestionnaireInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionnaireInstanceDetailsDto> {
        const response = await this.questionnairesUpdateQuestionnaireInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
