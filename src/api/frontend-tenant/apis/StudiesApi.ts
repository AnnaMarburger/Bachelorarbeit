/* tslint:disable */
/* eslint-disable */
/**
 * HSP Frontend Tenant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedListOfStudyDto,
  ProblemDetails,
  ProjectParticipationState,
  SortingParameter,
  StudyDetailsDto,
} from '../models/index';
import {
    PaginatedListOfStudyDtoFromJSON,
    PaginatedListOfStudyDtoToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    ProjectParticipationStateFromJSON,
    ProjectParticipationStateToJSON,
    SortingParameterFromJSON,
    SortingParameterToJSON,
    StudyDetailsDtoFromJSON,
    StudyDetailsDtoToJSON,
} from '../models/index';

export interface StudiesGetPublicStudiesRequest {
    pageNumber?: number;
    pageSize?: number;
    sorting?: Array<SortingParameter>;
    search?: string;
}

export interface StudiesGetStudiesRequest {
    pageNumber?: number;
    pageSize?: number;
    sorting?: Array<SortingParameter>;
    search?: string;
    states?: Array<ProjectParticipationState>;
}

export interface StudiesGetStudyRequest {
    studyId: string;
}

export interface StudiesJoinParticipantGroupRequest {
    groupId: string;
    body: string;
}

export interface StudiesParticipateRequest {
    studyId: string;
}

/**
 * 
 */
export class StudiesApi extends runtime.BaseAPI {

    /**
     */
    async studiesGetPublicStudiesRaw(requestParameters: StudiesGetPublicStudiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfStudyDto>> {
        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sorting'] != null) {
            queryParameters['sorting'] = requestParameters['sorting'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/studies/public`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfStudyDtoFromJSON(jsonValue));
    }

    /**
     */
    async studiesGetPublicStudies(requestParameters: StudiesGetPublicStudiesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfStudyDto> {
        const response = await this.studiesGetPublicStudiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async studiesGetStudiesRaw(requestParameters: StudiesGetStudiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfStudyDto>> {
        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['sorting'] != null) {
            queryParameters['sorting'] = requestParameters['sorting'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['states'] != null) {
            queryParameters['states'] = requestParameters['states'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/studies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfStudyDtoFromJSON(jsonValue));
    }

    /**
     */
    async studiesGetStudies(requestParameters: StudiesGetStudiesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfStudyDto> {
        const response = await this.studiesGetStudiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async studiesGetStudyRaw(requestParameters: StudiesGetStudyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StudyDetailsDto>> {
        if (requestParameters['studyId'] == null) {
            throw new runtime.RequiredError(
                'studyId',
                'Required parameter "studyId" was null or undefined when calling studiesGetStudy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/studies/{studyId}`.replace(`{${"studyId"}}`, encodeURIComponent(String(requestParameters['studyId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudyDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async studiesGetStudy(requestParameters: StudiesGetStudyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StudyDetailsDto> {
        const response = await this.studiesGetStudyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async studiesJoinParticipantGroupRaw(requestParameters: StudiesJoinParticipantGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling studiesJoinParticipantGroup().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling studiesJoinParticipantGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/studies/groups/{groupId}/use-join-qr-code`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async studiesJoinParticipantGroup(requestParameters: StudiesJoinParticipantGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.studiesJoinParticipantGroupRaw(requestParameters, initOverrides);
    }

    /**
     */
    async studiesParticipateRaw(requestParameters: StudiesParticipateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['studyId'] == null) {
            throw new runtime.RequiredError(
                'studyId',
                'Required parameter "studyId" was null or undefined when calling studiesParticipate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/public/studies/{studyId}/participate`.replace(`{${"studyId"}}`, encodeURIComponent(String(requestParameters['studyId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async studiesParticipate(requestParameters: StudiesParticipateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.studiesParticipateRaw(requestParameters, initOverrides);
    }

}
